#ifndef _ARDUINO_AVR_CEU
#define _ARDUINO_AVR_CEU

native/const
    _ADC_vect_num,
    _TIMER1_COMPA_vect_num,
    _TIMER1_OVF_vect_num,
    _SPI_STC_vect_num,
    _USART_RX_vect_num,
    _USART_TX_vect_num,
    _WDT_vect_num,
;

native
    _ADCSRA,
    _ADIE,
    _ADMUX,
    _CS10,
    _CS12,
    _OCIE1A,
    _OCR1A,
    _RXCIE0,
    _RXEN0,
    _TCCR1A,
    _TCCR1B,
    _TCNT1,
    _TIMSK1,
    _TOIE1,
    _TXCIE0,
    _TXEN0,
    _UBRR0H,
    _UBRR0L,
    _UCSR0A,
    _UCSR0B,
    _UCSR0C,
    _UCSZ00,
    _UDR0,
    _UDRE0,
    _USBS0,
    _WGM12,
;

native/pre do
    ##include <avr/io.h>
    ##include "LowPower.h"

##ifdef CEU_FEATURES_ISR_SLEEP
    enum {
        CEU_PM_ADC = 0,
        CEU_PM_TIMER1,
        CEU_PM_WDT,
        CEU_PM_N,
    };

    void ceu_pm_init (void) {
        // ok
    }

    void ceu_pm_sleep (void)
    {
        if (CEU_PM_STATE(CEU_PM_TIMER1))
        {
            LowPower.idle(SLEEP_FOREVER,
                          CEU_PM_STATE(CEU_PM_ADC),
                          TIMER2_OFF,
                          CEU_PM_STATE(CEU_PM_TIMER1),
                          TIMER0_OFF, SPI_OFF, USART0_OFF, TWI_OFF);
        }
        else if (CEU_PM_STATE(CEU_PM_ADC))
        {
            LowPower.adcNoiseReduction(SLEEP_FOREVER,
                                       CEU_PM_STATE(CEU_PM_ADC),
                                       TIMER2_OFF);
        }
        else
        {
            LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF);
        }
    }
##endif

end

#endif
