#include "arduino/avr.ceu"

#ifndef CEU_WCLOCK_IMPL

#define CEU_WCLOCK_IRQ_N        _WDT_vect_num
#define CEU_PM_WCLOCK           CEU_PM_WDT
#define CEU_WCLOCK_PRESCALER    1024

#define ceu_wdt_init            ceu_wclock_init
#define ceu_wdt_request         ceu_wclock_request
#define ceu_wdt_done            ceu_wclock_done
#define ceu_wdt_dt              ceu_wclock_dt

#include "../../wclock.ceu"

#endif

native/pos do
	##include <avr/wdt.h>

    // Possible sleep timeouts:
    // WDTO_15MS,  WDTO_30MS, WDTO_60MS, WDTO_120MS, WDTO_250MS,
    // WDTO_500MS, WDTO_1S,   WDTO_2S,   WDTO_4S,    WDTO_8S,

    static s32 ceu_wdt_us_pending   = CEU_WCLOCK_INACTIVE;
    static s32 ceu_wdt_us_confirmed = CEU_WCLOCK_INACTIVE;

    void ceu_wdt_init (void) {
        // ok
    }

    void ceu_wdt_request (s32 us, bool was_active) {
        if (us == CEU_WCLOCK_INACTIVE) {
            ceu_wdt_us_pending = CEU_WCLOCK_INACTIVE;
            wdt_disable();
        } else {
            int period;
            if (us < 15000) {
#if 0
                ceu_assert(0, "not enough timer resolution");
#else
                period = WDTO_15MS;
                ceu_wdt_us_pending = 15000;
#endif
            } else if (us < 30000) {
                period = WDTO_15MS;
                ceu_wdt_us_pending = 15000;
            } else if (us < 60000) {
                period = WDTO_30MS;
                ceu_wdt_us_pending = 30000;
            } else if (us < 120000) {
                period = WDTO_60MS;
                ceu_wdt_us_pending = 60000;
            } else if (us < 250000) {
                period = WDTO_120MS;
                ceu_wdt_us_pending = 120000;
            } else if (us < 500000) {
                period = WDTO_250MS;
                ceu_wdt_us_pending = 250000;
            } else if (us < 1000000) {
                period = WDTO_500MS;
                ceu_wdt_us_pending = 500000;
            } else if (us < 2000000) {
                period = WDTO_1S;
                ceu_wdt_us_pending = 1000000;
            } else if (us < 4000000) {
                period = WDTO_2S;
                ceu_wdt_us_pending = 2000000;
            } else if (us < 8000000) {
                period = WDTO_4S;
                ceu_wdt_us_pending = 4000000;
            } else {
                period = WDTO_8S;
                ceu_wdt_us_pending = 8000000;
            }
            //wdt_disable();
            wdt_enable(period);
            bitSet(WDTCSR, WDIE);	
        }
    }

    void ceu_wdt_done (void) {
        ceu_wdt_us_confirmed = ceu_wdt_us_pending;
    }

    s32 ceu_wdt_dt (void) {
        s32 us = ceu_wdt_us_confirmed;
        ceu_wdt_us_confirmed = CEU_WCLOCK_INACTIVE;
        return us;
    }
end
