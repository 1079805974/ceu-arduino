#define CEU_WCLOCK_IMPL
#define CEU_WCLOCK_PRESCALER 64

#define CEU_WCLOCK_US_TO_INCS(us)     ((s32)(((double)(us))*F_CPU/CEU_WCLOCK_PRESCALER/1000000L))
#define CEU_WCLOCK_US_TO_OVERFLOW(us) (65536 - CEU_WCLOCK_US_TO_INCS(us) - 1) // -1: sleep one more tick to compensate math rounds
#define CEU_WCLOCK_INCS_TO_US(incs)   ((s32)(((double)(incs))*1000000L*CEU_WCLOCK_PRESCALER/F_CPU)+1) // +1: add one more us to compensate math round

#include "timer1.ceu"
#include "wdt.ceu"

native/pos do
    enum {
        CEU_WCLOCK_NONE = 0,
        CEU_WCLOCK_TIMER1,
        CEU_WCLOCK_WDT,
    };

    static bool ceu_wclock_is_active[3] = { 0,0,0 };
    static int  ceu_wclock_source = CEU_WCLOCK_NONE;

    static int ceu_callback_wclock (int cmd, tceu_callback_val p1, tceu_callback_val p2)
    {
        switch (cmd) {
            case CEU_CALLBACK_WCLOCK_MIN: {
                s32 us = p1.num;
                if (us == CEU_WCLOCK_INACTIVE)
                {
                    if (ceu_wclock_source == CEU_WCLOCK_TIMER1) {
                        ceu_timer1_request(CEU_WCLOCK_INACTIVE, 0);
                        ceu_wclock_is_active[CEU_WCLOCK_TIMER1] = 0;
##ifdef CEU_FEATURES_ISR_SLEEP
                        ceu_pm_set(CEU_PM_TIMER1, 0);
##endif
                    } else if (ceu_wclock_source == CEU_WCLOCK_WDT) {
                        ceu_wdt_request(CEU_WCLOCK_INACTIVE, 0);
                        ceu_wclock_is_active[CEU_WCLOCK_WDT] = 0;
##ifdef CEU_FEATURES_ISR_SLEEP
                        ceu_pm_set(CEU_PM_WDT, 0);
##endif
                    }
                    ceu_wclock_source = CEU_WCLOCK_NONE;
                }
                else
                {
                    if ((us < 15000) ||
                        (ceu_wclock_is_active[CEU_WCLOCK_WDT] && us<ceu_wdt_us_pending))
                    {
//Serial.print("min/timer1 "); Serial.println(us); _DELAY(50);
                        ceu_timer1_request(us, ceu_wclock_is_active[CEU_WCLOCK_TIMER1]);
                        ceu_wclock_is_active[CEU_WCLOCK_TIMER1] = 1;
##ifdef CEU_FEATURES_ISR_SLEEP
                        ceu_pm_set(CEU_PM_TIMER1, 1);
##endif
                    } else if (!ceu_wclock_is_active[CEU_WCLOCK_WDT]) {
//Serial.print("min/wdt "); Serial.println(us); _DELAY(50);
                        ceu_wdt_request(us, ceu_wclock_is_active[CEU_WCLOCK_WDT]);
                        ceu_wclock_is_active[CEU_WCLOCK_WDT] = 1;
##ifdef CEU_FEATURES_ISR_SLEEP
                        ceu_pm_set(CEU_PM_WDT, 1);
##endif
                    }
                }
                return 1;
            }
            case CEU_CALLBACK_WCLOCK_DT:
                if (ceu_wclock_source == CEU_WCLOCK_TIMER1) {
                    s32 us = ceu_timer1_dt();
//Serial.print("dt/timer1 "); Serial.println(us); _DELAY(50);
                    ceu_callback_ret.num = us;
                    if (ceu_wdt_us_pending != CEU_WCLOCK_INACTIVE) {
                        ceu_wdt_us_pending -= us;
                        if (ceu_wdt_us_pending < 0) {
                            ceu_wdt_us_pending = 0;
                        }
                        //ceu_assert(ceu_wdt_us_pending >= 0, "bug found");
                    }
                } else if (ceu_wclock_source == CEU_WCLOCK_WDT) {
                    ceu_assert(!ceu_wclock_is_active[CEU_WCLOCK_TIMER1], "cannot mix timer1/wdt");
                    ceu_callback_ret.num = ceu_wdt_dt();
//Serial.print("dt/wdt "); Serial.println(ceu_callback_ret.num); _DELAY(50);
                } else {
                    ceu_callback_ret.num = CEU_WCLOCK_INACTIVE;
                }
                return 1;
            default:
                return 0;
        }
    }
    static tceu_callback CEU_CALLBACK_WCLOCK = { &ceu_callback_wclock, NULL };
end

{
    ceu_callback_register(&CEU_CALLBACK_WCLOCK);
    ceu_timer1_init();
    ceu_wdt_init();
}

///////////////////////////////////////////////////////////////////////////////
// INPUT / OUTPUT
///////////////////////////////////////////////////////////////////////////////

input none CEU_WCLOCK;
spawn async/isr [_TIMER1_OVF_vect_num, 0] do
    {
        ceu_wclock_source = CEU_WCLOCK_TIMER1;
        ceu_timer1_done();
    }
    emit CEU_WCLOCK;         // dummy emit to trigger `ceu_input` in env.ino
end

spawn async/isr [_WDT_vect_num, 0] do
    {
        ceu_wclock_source = CEU_WCLOCK_WDT;
        ceu_wdt_done();
        wdt_disable();
    }
    emit CEU_WCLOCK;         // dummy emit to trigger `ceu_input` in env.ino
end
