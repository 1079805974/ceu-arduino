///////////////////////////////////////////////////////////////////////////////
// EXTERNAL INTERFACE
///////////////////////////////////////////////////////////////////////////////

#ifndef CEU_USART_BUF_N
#define CEU_USART_BUF_N 32
#endif

output (on/off,int?) USART;
output byte          USART_TX_REQUEST;
input  none          USART_TX_DONE;
input  none          USART_RX;

code/await Usart    (var int bps)                   -> NEVER;
code/await Usart_TX (var&[] byte buf)               -> none;
code/await Usart_RX (var&[] byte buf, var usize? n) -> none;

/* TODO: only working with original Arduino */

///////////////////////////////////////////////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////////////////////////////////////////////

#include "arduino/avr.ceu"

native/pre do
#ifdef __AVR_ATmega644P__
    ##define CEU_USART_BAUD(bps) (((F_CPU / (bps*16UL))) - 1)
#else
    ##define CEU_USART_BAUD(bps) ((F_CPU/4/bps - 1) / 2)
#endif
end

var Lock ceu_usart_lock;
var int  ceu_usart_bps   = _;
var u8   ceu_usart_rx_tx = 0;

var[CEU_USART_BUF_N*] byte ceu_usart_rx_buf;
var[CEU_USART_BUF_N*] byte ceu_usart_tx_buf;

///////////////////////////////////////////////////////////////////////////////
// INPUT / OUTPUT
///////////////////////////////////////////////////////////////////////////////

output (on/off v, int? bps) USART do
    if v then
        outer.ceu_usart_bps = bps!;
        {
            UBRR0H = (CEU_USART_BAUD(@bps!)>>8);  // set baud rate
            UBRR0L = (CEU_USART_BAUD(@bps!));
            UCSR0C = (1<<USBS0) | (3<<UCSZ00);      // 8data, 2stop-bit

            UCSR0B = (1<<RXEN0)  | (1<<TXEN0)       // enable RX/TX
                   | (1<<RXCIE0) | (1<<TXCIE0);     // enable interrupts
        }
    else
        {
            UCSR0B = 0;                             // disable TX/RX & interrups
        }
    end
end

output (byte v) USART_TX_REQUEST do
    atomic do
        outer.ceu_usart_tx_buf = outer.ceu_usart_tx_buf .. [v];
        if $outer.ceu_usart_tx_buf == 1 then
            _UDR0 = v;
        end
    end
end

spawn async/isr [_USART_RX_vect_num,0] do
    outer.ceu_usart_rx_buf = outer.ceu_usart_rx_buf .. [_UDR0];
    emit USART_RX;
end

spawn async/isr [_USART_TX_vect_num,0] do
    $outer.ceu_usart_tx_buf = $outer.ceu_usart_tx_buf - 1;
    if $outer.ceu_usart_tx_buf > 0 then
        _UDR0 = outer.ceu_usart_tx_buf[0];
    end
    emit USART_TX_DONE;
end

///////////////////////////////////////////////////////////////////////////////
// ABSTRACTIONS
///////////////////////////////////////////////////////////////////////////////

code/await Usart (var int bps) -> NEVER do
    emit USART(on, bps);
    do finalize with
        emit USART(off, _);
    end
    await FOREVER;
end

code/await Usart_TX (var&[] byte buf) -> none
do
    lock outer.ceu_usart_lock do
        var usize i;
        loop i in [0->$buf[ do
            _ceu_assert(_UCSR0A & (1<<_UDRE0), "bug found");
            emit USART_TX_REQUEST(buf[i]);
            await USART_TX_DONE;
        end
        loop do
            if $outer.ceu_usart_tx_buf == 0 then
                break;
            end
            await USART_TX_DONE;
            {digitalWrite(13, !digitalRead(13));}
        end
    end
end

code/await Usart_RX (var&[] byte buf, var usize? n) -> none
do
#if 0
    buf = [].."alo\n";
#else
    loop do
        atomic do
            buf = buf..outer.ceu_usart_rx_buf;
            outer.ceu_usart_rx_buf = [];
        end
        if (n? and $buf>=n!) or ((not n?) and $buf>0) then
            break;
        end

        await USART_RX;
    end
#endif
end
