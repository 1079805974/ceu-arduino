#include "arduino/avr.ceu"

#define CEU_TIMER_IRQ_N     _TIMER1_OVF_vect_num
#define CEU_TIMER_PRESCALER 1024

#include "../timer.ceu"

native/pos do
    static u16 ceu_timer_old;

    void ceu_timer_init (void) {
        ceu_timer_old = TCNT1;
        TCCR1A = 0;
        TCCR1B = (1 << CS12) | (1 << CS10); // 1024 prescaler
    }

    void ceu_timer_request (s32 us) {
        ceu_pm_set(CEU_PM_TIMER1, (us!=CEU_WCLOCK_INACTIVE));
        if (us == CEU_WCLOCK_INACTIVE) {
            TIMSK1 = TIMSK1 & ~(1 << TOIE1);
        } else {
            s32 v = CEU_TIMER_US_TO_OVERFLOW(us);
            ceu_assert(v > 0, "bug found");
            TCNT1 = v;
            ceu_timer_old = v;
            TIMSK1 = TIMSK1 | (1 << TOIE1);
        }
    }

    s32 ceu_timer_done (void) {
        u16 now = TCNT1;
        s32 dt  = (u16)(now - ceu_timer_old);
        ceu_timer_old = now;
        return CEU_TIMER_INCS_TO_US(dt);
    }
end
