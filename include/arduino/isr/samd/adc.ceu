#include "arduino/samd.ceu"

#define CEU_ADC_IRQ_N _ADC_IRQn

native/pre do
    void ceu_adc_init (void) {
        // TODO
        //bitClear(ADCSRA, ADEN);  // "wiring.c" inits with "bitSet"
    }

    void ceu_adc (bool v) {
        // TODO
        //bitWrite(ADCSRA, ADEN, v);
    }

    void ceu_adc_request (int pin) {
        /* from wiring_analog.c */
        ceu_samd_pinPeripheral(pin, PIO_ANALOG);

        CEU_SAMD_WAIT(*ADC);
        ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input

        CEU_SAMD_WAIT(*ADC);
        ADC->CTRLA.bit.ENABLE = 0x01;               // Enable ADC

        CEU_SAMD_WAIT(*ADC);
        ADC->SWTRIG.bit.START = 1;                  // Start conversion
        ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;      // Clear the Data Ready flag

        CEU_SAMD_WAIT(*ADC);
        NVIC_SetPriority(ADC_IRQn, 0);              //set priority of the interrupt
        NVIC_EnableIRQ(ADC_IRQn);                   // enable ADC interrupts
        ADC->INTENSET.reg |= ADC_INTENSET_RESRDY;   // enable ADC result ready interrupt

        CEU_SAMD_WAIT(*ADC);
        ADC->SWTRIG.bit.START = 1;                  // Start conversion again, since The first conversion after the reference is changed must not be used.
    }

    u16 ceu_adc_done (void) {
        ceu_assert(ADC->INTFLAG.bit.RESRDY == 1, "bug found");
        u16 value = ADC->RESULT.reg;
        CEU_SAMD_WAIT(*ADC);
        ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
        CEU_SAMD_WAIT(*ADC);
        return value;
    }
end

#include "../adc.ceu"
