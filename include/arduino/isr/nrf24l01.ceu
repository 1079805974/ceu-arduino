#define CONFIG      0x00
#define EN_AA       0x01
#define EN_RXADDR   0x02
#define SETUP_AW    0x03
#define SETUP_RETR  0x04
#define RF_CH       0x05
#define RF_SETUP    0x06
#define STATUS      0x07
#define OBSERVE_TX  0x08
#define CD          0x09
#define RX_ADDR_P0  0x0A
#define RX_ADDR_P1  0x0B
#define RX_ADDR_P2  0x0C
#define RX_ADDR_P3  0x0D
#define RX_ADDR_P4  0x0E
#define RX_ADDR_P5  0x0F
#define TX_ADDR     0x10
#define RX_PW_P0    0x11
#define RX_PW_P1    0x12
#define RX_PW_P2    0x13
#define RX_PW_P3    0x14
#define RX_PW_P4    0x15
#define RX_PW_P5    0x16
#define FIFO_STATUS 0x17
#define DYNPD	    0x1C
#define FEATURE	    0x1D
    
/* Bit Mnemonics */
#define MASK_RX_DR  6
#define MASK_TX_DS  5
#define MASK_MAX_RT 4
#define EN_CRC      3
#define CRCO        2
#define PWR_UP      1
#define PRIM_RX     0
#define ENAA_P5     5
#define ENAA_P4     4
#define ENAA_P3     3
#define ENAA_P2     2
#define ENAA_P1     1
#define ENAA_P0     0
#define ERX_P5      5
#define ERX_P4      4
#define ERX_P3      3
#define ERX_P2      2
#define ERX_P1      1
#define ERX_P0      0
#define AW          0
#define ARD         4
#define ARC         0
#define PLL_LOCK    4
#define RF_DR       3
#define RF_PWR      6
#define RX_DR       6
#define TX_DS       5
#define MAX_RT      4
#define RX_P_NO     1
#define TX_FULL     0
#define PLOS_CNT    4
#define ARC_CNT     0
#define TX_REUSE    6
#define FIFO_FULL   5
#define TX_EMPTY    4
#define RX_FULL     1
#define RX_EMPTY    0
#define DPL_P5	    5
#define DPL_P4	    4
#define DPL_P3	    3
#define DPL_P2	    2
#define DPL_P1	    1
#define DPL_P0	    0
#define EN_DPL	    2
#define EN_ACK_PAY  1
#define EN_DYN_ACK  0
    
/* Instruction Mnemonics */
#define R_REGISTER    0x00
#define W_REGISTER    0x20
#define REGISTER_MASK 0x1F
#define ACTIVATE      0x50
#define R_RX_PL_WID   0x60
#define R_RX_PAYLOAD  0x61
#define W_TX_PAYLOAD  0xA0
#define W_ACK_PAYLOAD 0xA8
#define FLUSH_TX      0xE1
#define FLUSH_RX      0xE2
#define REUSE_TX_PL   0xE3
#define NOP           0xFF
    
/* Non-P omissions */
#define LNA_HCURR   0
    
/* P model memory Map */
#define RPD         0x09
    
/* P model bit Mnemonics */
#define RF_DR_LOW   5
#define RF_DR_HIGH  3
#define RF_PWR_LOW  1

#define CEU_PIN_02_MODE _FALLING
#include "pin-02.ceu"

native/pre do
    ##include <nRF24L01.h>
    ##include <RF24.h>
    RF24 ceu_nrf24l01(8,7);
    const uint64_t ceu_nrf24l01_pipe = 0xAABBCCDDEELL;
end

input none NRF24L01_RX;

spawn async/isr [_digitalPinToInterrupt(2),_FALLING] do
    emit NRF24L01_RX;
end

var int ceu_nrf24l01_ce  = _;
var int ceu_nrf24l01_csn = _;

code/await Nrf24l01_Write (var byte reg, var byte value) -> byte do
    _digitalWrite(outer.ceu_nrf24l01_csn, 0);
    var byte status = await SPI_Transfer(W_REGISTER | (REGISTER_MASK & reg));
    await SPI_Transfer(value);
    _digitalWrite(outer.ceu_nrf24l01_csn, 1);
    escape status;
end

code/await Nrf24l01_Read (var byte reg) -> byte do
    _digitalWrite(outer.ceu_nrf24l01_csn, 0);
    await SPI_Transfer(R_REGISTER | (REGISTER_MASK & reg));
    var byte v = await SPI_Transfer(0xFF);
    _digitalWrite(outer.ceu_nrf24l01_csn, 1);
    escape v;
end

code/await Nrf24l01 (var int ce, var int csn) -> NEVER do
    outer.ceu_nrf24l01_ce  = ce;
    outer.ceu_nrf24l01_csn = csn;
    {
        pinMode(@ce,  OUTPUT);
        pinMode(@csn, OUTPUT);

        ceu_nrf24l01.begin();
        ceu_nrf24l01.setPayloadSize(1);
        ceu_nrf24l01.setAutoAck(false);              // true by default
        ceu_nrf24l01.setDataRate(RF24_2MBPS);
        ceu_nrf24l01.openReadingPipe(1, ceu_nrf24l01_pipe);
        ceu_nrf24l01.openWritingPipe(ceu_nrf24l01_pipe);
        ceu_nrf24l01.write_register(CONFIG, ceu_nrf24l01.read_register(CONFIG) | _BV(MASK_TX_DS) | _BV(MASK_MAX_RT)); // disables interrupts other than receive payload
    }
    await FOREVER;
end

code/await Nrf24l01_RX (none) -> byte do
    {
        ceu_nrf24l01.startListening();
    }
    do finalize with
        { ceu_nrf24l01.stopListening(); }
    end

    await NRF24L01_RX;

    await Nrf24l01_Write(STATUS, {_BV(RX_DR)});     // clears interrupt bit
    var byte v = _;
    { ceu_nrf24l01.read(&@v, 1); }
    escape v;
end

code/await Nrf24l01_TX (var byte v) -> none do
    watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0) do
#if 1   // only needed if possibly power down?
        var byte cfg = await Nrf24l01_Read(CONFIG);
        await Nrf24l01_Write(CONFIG, {(@(cfg) | _BV(PWR_UP)) & ~_BV(PRIM_RX)});
        _delayMicroseconds(150);
#endif

        _digitalWrite(outer.ceu_nrf24l01_csn, 0);
        await SPI_Transfer(W_TX_PAYLOAD);
        await SPI_Transfer(v);
        _digitalWrite(outer.ceu_nrf24l01_csn, 1);

        _digitalWrite(outer.ceu_nrf24l01_ce, 1);
        _delayMicroseconds(15);
        _digitalWrite(outer.ceu_nrf24l01_ce, 0);
    end
end
