// SHELL
output (char* buf, int n)  =>void COMMAND;

// SERIAL
output (int)      =>void SERIAL_BEGIN;
output (void)     =>void SERIAL_END;
output (char*,int)=>void SERIAL_WRITE_BUF;
input int SERIAL_READ;

native nohold _strlen(), _strncat(), _strncpy();
native do
    ##include <string.h>
end

call SERIAL_BEGIN => 9600;
finalize with
    call SERIAL_END;
end

#define CMD_SIZE 32

loop do
    var char[CMD_SIZE] cmd;
    loop i, CMD_SIZE-2 do
        var char v = await SERIAL_READ;
		cmd[i] = v;
        if v == '\n' then
			cmd[i+1] = '\0';
            break;
        end
    end
    cmd[CMD_SIZE-2] = '\n';
    cmd[CMD_SIZE-1] = '\0';
    call COMMAND => (cmd,CMD_SIZE);

    _strncat(cmd, "\n", CMD_SIZE);
    call SERIAL_WRITE_BUF => (cmd,_strlen(cmd));
end
