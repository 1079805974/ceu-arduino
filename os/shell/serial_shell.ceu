// SHELL
output (char* buf, int n)  =>void COMMAND;

// SERIAL
output (int)      =>void SERIAL_BEGIN;
output (void)     =>void SERIAL_END;
output (char*,int)=>void SERIAL_WRITE_BUF;
input int SERIAL_READ;

native nohold _strlen(), _strncat(), _strncpy();
native do
    ##include <string.h>
end

call SERIAL_BEGIN => 9600;
finalize with
    call SERIAL_END;
end

var char[20] str;
    str[0] = 'F';
    str[1] = '\n';
    str[2] = '\0';

loop do
	var char[20] cmd;
	loop i, 18 do
        var char v = await SERIAL_READ;
		cmd[i] = v;
        if v == '\n' then
			cmd[i+1] = '\0';
            break;
        end
    end
	cmd[18] = '\n';
	cmd[19] = '\0';
    call COMMAND => (cmd,20);

    _strncat(cmd, "\n", 20);
    call SERIAL_WRITE_BUF => (cmd,_strlen(cmd));
end
