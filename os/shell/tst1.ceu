output (char* buf, int n)  =>void COMMAND;

native nohold _strncpy();
native do
    ##include <string.h>
end

#define CMD_SIZE 32
var char[CMD_SIZE] cmd;

// SAVE
_strncpy(cmd, "save 0xBE00 10 abcdefghij", CMD_SIZE);
call COMMAND => (cmd,CMD_SIZE);
_strncpy(cmd, "save 0xBF00 10 jihgfedcba", CMD_SIZE);
call COMMAND => (cmd,CMD_SIZE);

// GPIO
_strncpy(cmd, "load 0 0x2000", CMD_SIZE);
call COMMAND => (cmd,CMD_SIZE);
_strncpy(cmd, "start 0", CMD_SIZE);
call COMMAND => (cmd,CMD_SIZE);

loop do
    // APP1
    _strncpy(cmd, "load 1 0xC000", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);

    _strncpy(cmd, "link 1 1 0 244", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);
    _strncpy(cmd, "link 1 2 0 243", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);
    _strncpy(cmd, "start 1", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);

    await 5s;

    _strncpy(cmd, "stop 1", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);

    // APP2
    _strncpy(cmd, "load 2 0xC500", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);

    _strncpy(cmd, "link 2 1 0 244", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);
    _strncpy(cmd, "link 2 2 0 243", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);
    _strncpy(cmd, "start 2", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);

    await 5s;

    _strncpy(cmd, "stop 2", CMD_SIZE);
    call COMMAND => (cmd,CMD_SIZE);
end
