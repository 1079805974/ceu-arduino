output (char* buf, int n)  =>void COMMAND;

native nohold _strncpy();
native do
    ##include <string.h>
end

var char[20] cmd;

// GPIO
_strncpy(cmd, "load 0 0x2000", 20);
call COMMAND => (cmd,20);
_strncpy(cmd, "start 0", 20);
call COMMAND => (cmd,20);

loop do
    // APP1
    _strncpy(cmd, "load 1 0xC000", 20);
    call COMMAND => (cmd,20);

    _strncpy(cmd, "link 1 1 0 244", 20);
    call COMMAND => (cmd,20);
    _strncpy(cmd, "link 1 2 0 243", 20);
    call COMMAND => (cmd,20);
    _strncpy(cmd, "start 1", 20);
    call COMMAND => (cmd,20);

    await 5s;

    _strncpy(cmd, "stop 1", 20);
    call COMMAND => (cmd,20);

    // APP2
    _strncpy(cmd, "load 2 0xC500", 20);
    call COMMAND => (cmd,20);

    _strncpy(cmd, "link 2 1 0 244", 20);
    call COMMAND => (cmd,20);
    _strncpy(cmd, "link 2 2 0 243", 20);
    call COMMAND => (cmd,20);
    _strncpy(cmd, "start 2", 20);
    call COMMAND => (cmd,20);

    await 5s;

    _strncpy(cmd, "stop 2", 20);
    call COMMAND => (cmd,20);
end
