// SHELL
output (void** apps, int n)=>void APPS;
output (char* buf, int n)  =>void COMMAND;

// SERIAL
output (int)      =>void SERIAL_BEGIN;
output (void)     =>void SERIAL_END;
output (char*,int)=>void SERIAL_WRITE;
input int SERIAL_READ;

native nohold _strlen(), _strncat();
native do
    ##include <string.h>

    extern tceu_app gpio;
    extern tceu_app app1;
    extern tceu_app app2;
    extern tceu_app shell;
	extern tceu_app serial;
	extern tceu_app tst;

    void* APPS[] = { &gpio, &app1, &app2 };

    tceu_lnk lnk1 = { &app1,1   ,  &gpio,245, NULL };
    tceu_lnk lnk2 = { &app1,2   ,  &gpio,244, NULL };
    tceu_lnk lnk3 = { &app2,1   ,  &gpio,245, NULL };
    tceu_lnk lnk4 = { &app2,2   ,  &gpio,244, NULL };

	tceu_lnk lnk5 = { &tst,1    ,  &shell,245, NULL };
	tceu_lnk lnk6 = { &tst,2    ,  &shell,244, NULL };

	tceu_lnk lnk7  = { &tst,3    ,  &serial,245, NULL };
	tceu_lnk lnk8  = { &tst,4    ,  &serial,244, NULL };
	tceu_lnk lnk9  = { &tst,5    ,  &serial,243, NULL };
	tceu_lnk lnk10 = { &serial,1 ,  &tst,240, NULL };

/*
	// APP 1
	#define CEU_IN_OS_STOP 246
	#define CEU_OUT_PIN_MODE 1
	#define CEU_OUT_DIGITAL_WRITE 2

	// APP 2
	#define CEU_IN_OS_STOP 246
	#define CEU_OUT_PIN_MODE 1
	#define CEU_OUT_DIGITAL_WRITE 2

	// GPIO
	#define CEU_IN_OS_STOP 246
	#define CEU_IN_PIN_MODE 245
	#define CEU_IN_DIGITAL_WRITE 244
	#define CEU_OUT_DIGITAL_CHANGED 1

	// SERIAL
	#define CEU_IN_OS_STOP 246
	#define CEU_IN_SERIAL_BEGIN 245
	#define CEU_IN_SERIAL_END 244
	#define CEU_IN_SERIAL_WRITE 243
	#define CEU_OUT_SERIAL_READ 1

	// SHELL
	#define CEU_IN_OS_STOP 246
	#define CEU_IN_APPS 245
	#define CEU_IN_COMMAND 244

	// TST2
	#define CEU_IN_OS_STOP 246
	#define CEU_OUT_APPS 1
	#define CEU_OUT_COMMAND 2
	#define CEU_OUT_SERIAL_BEGIN 3
	#define CEU_OUT_SERIAL_END 4
	#define CEU_OUT_SERIAL_WRITE 5
	#define CEU_IN_SERIAL_READ 240

*/

    void MAIN (void) {
        ceu_sys_link(&lnk1);
        ceu_sys_link(&lnk2);
        ceu_sys_link(&lnk3);
        ceu_sys_link(&lnk4);
        ceu_sys_start(&gpio);

        ceu_sys_link(&lnk5);
        ceu_sys_link(&lnk6);
        ceu_sys_start(&shell);

		ceu_sys_link(&lnk7);
        ceu_sys_link(&lnk8);
		ceu_sys_link(&lnk9);
		ceu_sys_link(&lnk10);
		ceu_sys_start(&serial);

		ceu_sys_start(&tst);
    }
end

call APPS => (_APPS, 3);

call SERIAL_BEGIN => 9600;

loop do
	var char[20] cmd;
	loop i, 18 do
        var char v = await SERIAL_READ;
		cmd[i] = v;
        if v == '\n' then
			cmd[i+1] = '\0';
            break;
        end
    end
	cmd[18] = '\n';
	cmd[19] = '\0';
	call COMMAND => (cmd,20);

	_strncat(cmd, "\n", 20);
	call SERIAL_WRITE => (cmd,_strlen(cmd));
end

call SERIAL_END;
