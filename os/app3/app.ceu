output (void** apps, int n)=>void APPS;
output (char* buf, int n)  =>void COMMAND;

native nohold _snprintf();
native do
    extern tceu_app gpio;
    extern tceu_app app1;
    extern tceu_app app2;
    extern tceu_app shell;
	extern tceu_app app;

    void* APPS[] = { &app1, &app2 };

    tceu_lnk lnk1 = { &app1,1   ,  &gpio,245, NULL };
    tceu_lnk lnk2 = { &app1,2   ,  &gpio,244, NULL };
    tceu_lnk lnk3 = { &app2,1   ,  &gpio,245, NULL };
    tceu_lnk lnk4 = { &app2,2   ,  &gpio,244, NULL };

	tceu_lnk lnk5 = { &app,1    ,  &shell,245, NULL };
	tceu_lnk lnk6 = { &app,2    ,  &shell,244, NULL };

    void MAIN (void) {
        ceu_sys_link(&lnk1);
        ceu_sys_link(&lnk2);
        ceu_sys_link(&lnk3);
        ceu_sys_link(&lnk4);
        ceu_sys_start(&gpio);

        ceu_sys_link(&lnk5);
        ceu_sys_link(&lnk6);
        ceu_sys_start(&shell);
		ceu_sys_start(&app);
    }
end

call APPS => (_APPS, 2);

var char[20] cmd;

loop do
    _snprintf(cmd, 20, "start 0");
    call COMMAND => (cmd,20);
    await 5s;
    _snprintf(cmd, 20, "stop 0");
    call COMMAND => (cmd,20);
    _snprintf(cmd, 20, "start 1");
    call COMMAND => (cmd,20);
    await 5s;
    _snprintf(cmd, 20, "stop 1");
    call COMMAND => (cmd,20);
end

