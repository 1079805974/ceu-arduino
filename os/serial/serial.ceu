//#define ISR

native do
    ##include <avr/io.h>
    ##define BAUD_USART(baud_human) (((F_CPU / (baud_human * 16UL))) - 1)
end

input (int speed)=>void BEGIN do
    _UBRR0H = (byte)(_BAUD_USART(speed)>>8);    // set baud rate
    _UBRR0L = (byte)_BAUD_USART(speed);
    _UCSR0B = (1<<_RXEN0) | (1<<_TXEN0);        // enable RX/TX
    _UCSR0C = (1<<_USBS0)|(3<<_UCSZ00);         // format: 8data, 2stop-bit
#ifdef ISR
    _UCSR0B = _UCSR0B | (1 << _RXCIE0);         // enable RX interrupts
#endif
end

input (void)=>void END do
    _UCSR0B = 0;                                // disable RX/TX/ISR
end

/* TODO: call/rec */

input recursive (byte c)=>void WRITE do
    loop do
        if (_UCSR0A & (1<<_UDRE0)) then
            break;      // ready to transmit
        end
    end
    atomic do
        _UDR0 = c;          // send data
    end
end

// TODO: recursive
input recursive (byte* buf, int len)=>void WRITE_BUF do
    loop i, len do
        call WRITE => buf[i];
    end
end

output int READ;
        // TODO: request READLINE

#ifdef ISR

#define RX_SIZE 16

var byte[RX_SIZE] rxs;
var u8            rx_get;
var u8            rx_put;
atomic do
    rx_get = 0;
    rx_put = 0;
end

function isr[20] do
    var u8 put = (rx_put + 1) % RX_SIZE;
    var byte c = _UDR0;     // must always read (regardless of the space)
    if put != rx_get then
        rxs[rx_put] = c;
        rx_put = put;
    end
end

loop do
    var int tp = await OS_INTERRUPT
                 until tp==20;        // USART0_RX_vect

    loop do
        var byte c  = 0;        // =0 avoids "uninit" warning
        var bool has? = false;  // =false avoids "uninit" warning
        atomic do
            has? = (rx_get != rx_put);
            if has? then
                c = rxs[rx_get];
                rx_get = (rx_get + 1) % RX_SIZE;
            end
        end
        if has? then
            emit READ => c;
        else
            break;
        end
    end
end

#else  // ! ISR

async do
    loop do
        loop do
            // Wait for data to be received
            if (_UCSR0A & (1<<_RXC0)) then
                break;
            end
        end
        // Get and return received data from buffer
        var byte v = _UDR0;
        emit READ => v;
    end
end

await FOREVER;

#endif // ISR
