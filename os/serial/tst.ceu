output (int)      =>void BEGIN;
output (void)     =>void END;
output (char,char)=>void WRITE;
output (char*,int)=>void WRITE_BUF;

input int READ;

await OS_START;

call BEGIN => 9600;
finalize with
    call END;
end

native nohold _strncat(), _strlen(), _itoa();
native do
    ##include "stdio.h"
    ##include "string.h"
end

var char[22] str;
    str[20] = '\n';
    str[21] = '\0';

par do
    loop do
        loop i, 20 do
            var char v = await READ;
            str[i] = v;
            if v == '\n' then
                str[i+1] = '\0';
                break;
            end
        end

        //call WRITE_BUF => (str, _strlen(str));
        loop i, _strlen(str) do
            call WRITE => (str[i],str[i]);
            await 800us;
        end
    end
with
    await 1s;
    loop do
        var int fps = 0;
        var int dt_max = 0;
        var int dt_min = 9999;
        par/or do
            var int dt;
            every dt = OS_DT do
                fps = fps + 1;
                if dt > dt_max then
                    dt_max = dt;
                end
                if dt < dt_min then
                    dt_min = dt;
                end
            end
        with
            await 1s;
            var char[25] str; // [%d,%d,%d] (snprintf is too expensive!)
            str[0] = '\0';
            _strncat(str, "[", 25);
                _itoa(dt_min, &str[_strlen(str)], 10);
            _strncat(str, ",", 25);
                _itoa(1000000/fps, &str[_strlen(str)], 10);
            _strncat(str, ",", 25);
                _itoa(dt_max, &str[_strlen(str)], 10);
            _strncat(str, "]\n", 25);

            //call WRITE_BUF => (str, _strlen(str));
            loop i, _strlen(str) do
                call WRITE => (str[i],str[i]);
                await 800us;
            end
/*
*/
        end
    end
end
