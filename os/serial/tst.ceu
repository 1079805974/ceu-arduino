output (int)      =>void BEGIN;
output (void)     =>void END;
output (char,char)=>void WRITE;
output (char*,int)=>void WRITE_BUF;

input int READ;

await OS_START;

call BEGIN => 9600;
finalize with
    call END;
end

native nohold _snprintf(), _strncpy(), _strlen(), _strcmp();
native do
    ##include "stdio.h"
    ##include "string.h"
end

var char[22] str;
    str[20] = '\n';
    str[21] = '\0';

par do
    loop do
        loop i, 20 do
            var char v = await READ;
            str[i] = v;
            if v == '\n' then
                str[i+1] = '\0';
                break;
            end
        end

        //call WRITE_BUF => (str, _strlen(str));
        loop i, _strlen(str) do
            call WRITE => (str[i],str[i]);
            await 800us;
        end
    end
with
    await 1s;
    loop do
        var int fps = 0;
        var int dt_max = 0;
        var int dt_min = 9999;
        par/or do
            var int dt;
            every dt = OS_DT do
                fps = fps + 1;
                if dt > dt_max then
                    dt_max = dt;
                end
                if dt < dt_min then
                    dt_min = dt;
                end
            end
        with
            await 1s;
            var char[25] str;
                str[ 0] = '[';
                str[ 1] = '%';
                str[ 2] = '%';
                str[ 3] = '%';
                str[ 4] = ',';
                str[ 5] = '%';
                str[ 6] = '%';
                str[ 7] = '%';
                str[ 8] = ',';
                str[ 9] = '%';
                str[10] = '%';
                str[11] = '%';
                str[12] = '%';
                str[13] = '%';
                str[14] = ']';
                str[15] = '\n';
                str[16] = '\0';

                str[ 1]  = '0' + dt_min/100;
                str[ 2]  = '0' + dt_min%100/10;
                str[ 3]  = '0' + dt_min%10;

                var int one = 1000000/fps;
                str[ 5] = '0' + one/100;
                str[ 6] = '0' + one%100/10;
                str[ 7] = '0' + one%10;

                str[ 9] = '0' + dt_max/10000;
                str[10] = '0' + dt_max%10000/1000;
                str[11] = '0' + dt_max%1000/100;
                str[12] = '0' + dt_max%100/10;
                str[13] = '0' + dt_max%10;

            //call WRITE_BUF => (str, _strlen(str));
            loop i, _strlen(str) do
                call WRITE => (str[i],str[i]);
                await 800us;
            end
/*
*/
        end
    end
end
