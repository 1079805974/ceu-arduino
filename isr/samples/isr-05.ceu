/*
 * With 1024 prescaler: 16M/1024 incs/s : 15625 incs/s
 * 4194304 us for 65536 incs
 */
#define CPU_FREQ        16000000                          // 16Mhz
#define INCS_PER_SECOND (CPU_FREQ/1024)                   // 15625
#define US_PER_CYCLE    (65536*1000000 / INCS_PER_SECOND) // 4194304
#define US_TO_INCS(us)  ((us)*65536/US_PER_CYCLE)
//#define US_TO_OVERFLOW(us) (65536 - US_TO_INCS(us))
// all simplified goes to this:
#define US_TO_OVERFLOW(us) (65536 - (us/64))

native/pre do
    static s32 US = CEU_WCLOCK_INACTIVE;
    ##define ceu_out_wclock_set(us) ceu_sys_wclock_set(us)
    void ceu_sys_wclock_set (s32 us) {
        if (us == CEU_WCLOCK_INACTIVE) {
            TIMSK1 = TIMSK1 & ~(1 << TOIE1);
        } else {
            US = us;
            s32 v = US_TO_OVERFLOW(us);
            ceu_out_assert(v > 0);
            TCNT1 = v;
            TIMSK1 = TIMSK1 | (1 << TOIE1);
        }
    }
end

input int PIN02;

_pinMode(13, _OUTPUT);
_pinMode( 2, _INPUT);

par do
    atomic do
        _TCCR1A = 0;
        _TCCR1B = (1 << _CS12) | (1 << _CS10); // 1024 prescaler
    end
    async/isr [_TIMER1_OVF_vect_num, 0] do
        emit (_US)us;
    end
    await FOREVER;
with
    _digitalWrite(13, 1);
    loop i in 10 do
        await 1s;
    end
    _digitalWrite(13, 0);

    await 1s;
    loop i in 5 do
        _digitalWrite(13, 1);
        await 250ms;
        _digitalWrite(13, 0);
        await 250ms;
    end

    await 1s;
    loop i in 5 do
        _digitalWrite(13, 1);
        await 500ms;
        _digitalWrite(13, 0);
        await 500ms;
    end

    await 1s;
    loop i in 5 do
        _digitalWrite(13, 1);
        await 1s;
        _digitalWrite(13, 0);
        await 1s;
    end

    await 1s;
    loop i in 5 do
        _digitalWrite(13, 1);
        await 2s;
        _digitalWrite(13, 0);
        await 2s;
    end

    // ERROR here, overflow!
    await 1s;
    loop i in 5 do
        _digitalWrite(13, 1);
        await 5s;
        _digitalWrite(13, 0);
        await 5s;
    end
end
