input int  DT, DT_;

output int PIN12, PIN13;

native do
    ##define assert(v) if (!(v)) { digitalWrite(13,1); for(;;); }
end

class App with
    event int ok;
do
    var int ret = do
        #define _STRINGIFY(X) #X
        #define STRINGIFY(X) _STRINGIFY(X)
        #include STRINGIFY(CEUFILE)
    end;
    emit this.ok => ret;
end
var App app;
_printf("APP %d\n", sizeof(_CEU_App));

#define TM_INPUT_DT     DT
#define TM_INPUT_REDRAW REDRAW
#define _assert(v) if not (v) then emit PIN13=>1; loop do end; end
#define TM_QUEUE_MAX 1000
#define TM_BACKWARD_TICK 200

#include "timemachine.ceu"

class IOTimeMachine with
    interface IIOTimeMachine;
do
    par do
        loop do
            // starts off
            watching this.go_on do
                var int key;
                every key in KEY do
                    _queue_put(_CEU_IN_KEY, _CEU_EVTP(key), 0, null);
                end
            end
            await this.go_off;
        end
    with
        var _tceu_queue[] qu;   // TODO: ptr across await p/ else/if
        every qu in this.go_queue do
            if qu:evt == _CEU_IN_KEY then
                async(qu) do
                    emit KEY => qu:param.v;
                end
            else
                _assert(0);
            end
        end
    end
end
var IOTimeMachine io;

var TimeMachine tm with
    this.app = app;
    this.io  = io;
end;

/*
await 10s_;
emit tm.go_on;
await 1ms_;

loop do
    emit tm.go_seek => 0;
    TM_AWAIT_SEEK(tm);
    emit tm.go_forward => 1;
    await 10s_;
    emit tm.go_backward => 1;
    await 10s_;
end

var int key1 = await KEY_ until key1==_KEY_SELECT;
async do end
emit tm.go_on;
await 1ms_;
emit tm.go_backward => 4;
await FOREVER;
*/

loop do
    var int key1 = await KEY_ until key1==_KEY_SELECT;
    emit tm.go_on;

    par/or do
        var int key2 = await KEY_ until key2==_KEY_SELECT;
    with
        loop do
            var int key2 = await KEY_;
            TM_AWAIT_SEEK(tm);
            if key2 == _KEY_RIGHT then
                emit tm.go_forward => 4;
            else/if key2 == _KEY_LEFT then
                emit tm.go_backward => 4;
            end
        end
    end

    TM_AWAIT_SEEK(tm);
    emit tm.go_off;
end
/*
*/
