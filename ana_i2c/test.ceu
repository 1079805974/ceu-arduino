#include "wclock.ceu"
#include "out.ceu" 

#define SDA OUT_04
#define SCL OUT_05

output high/low OUT_05;
output high/low OUT_04;

_Serial.begin(9600);

code/await Delay(none) -> none do
    await 5ms;
end

output int SDA_IN;
output int SDA_OUT;

output (int sda) SDA_IN do
    {
        pinMode(@sda, INPUT);
    }
end

output (int sda) SDA_OUT do
    {
        pinMode(@sda, OUTPUT);
    }
end

code/call Read_SDA(var int sda) -> bool do
    var bool res = low;
    {   
        @res = digitalRead(@sda);
    }
    escape res;
end

code/await I2C_Start(none) -> none do 
    emit SDA(high);
    emit SCL(high);
    await Delay();
    emit SDA(low);
    await Delay();
    emit SCL(low);
end

code/await I2C_Stop(none) -> none do 
    emit SDA(low);
    emit SCL(low);
    await Delay();
    emit SCL(high);
    await Delay();
    emit SDA(high);
end

code/await I2C_Write_Ack(none) -> none do
    emit SCL(low);
    emit SDA(low);
    await Delay();
    emit SCL(high);
    await Delay();
end

code/await I2C_Read(none) -> byte do
    var byte res = 0;
    var int i = _;
    emit SDA_IN(4);
    loop i in [7 -> 0] do
        emit SCL(low);
        await Delay();
        var bool temp = call Read_SDA(4);
        {@res = (@res << 1) | @temp;}
        emit SCL(high);
        await Delay();
    end
    await I2C_Write_Ack();
    emit SDA_OUT(4);
    escape res;
end

code/await I2C_Write(var byte b) -> none do
    var bool value = _;
    var int i = _;
    loop i in [7 -> 0] do
        emit SCL(low);
        await Delay();
        {
            @value = @b & (1 << @i);
        }
        emit SDA(value);
        await Delay();
        emit SCL(high);
        await Delay();
    end
    await I2C_Write_Ack();
end

code/await I2C_Address(var byte addr, var bool read) -> none do
    var byte t = _;
    {
        unsigned char temp;
        if(@read){
            temp = 1;
        }else{
            temp = 0;
        }
        @t = (@addr << 1) | temp;
    };
    await I2C_Write(t);
end

code/await I2C_Read_Ack(none) -> bool do
    emit SDA_IN(4);
    emit SCL(low);
    var bool temp = call Read_SDA(4);
    await Delay();
    emit SCL(high);
    await Delay();
    emit SDA_OUT(4);
    escape temp;
end

var byte addr = 8;
loop do
    var bool res = _;
    await I2C_Start();
    await I2C_Address(addr, false);
    res = await I2C_Read_Ack();
    _Serial.println(res);
    _Serial.flush();
    await I2C_Start();
    await I2C_Address(addr, true);
    res = await I2C_Read_Ack();
    _Serial.println(res);
    _Serial.flush();
    await 1s;
end


