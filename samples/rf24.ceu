#include "arduino/isr/analog.ceu"
#include "arduino/isr/timer.ceu"
#include "arduino/arduino.ceu"

    #define RADIO_ID 0x66
    
    #define SENSOR_PIN A0
    #define LED_PIN 3
    
    #define FULL_POWER 1023
    #define HALF_POWER 300

    #define SENSOR_THRESHOLD 500
    
    #define TIME_THRESHOLD 2000
 native/pre do
    /*
     * This application consists of a node of a distributed smart lighting system.
     */
    
    ##include <SPI.h>
    ##include <nRF24L01.h>
    ##include <RF24.h>
    
   
    //
    // Hardware configuration
    //
    
    // Set up nRF24L01 radio on SPI bus plus pins 9 & 10 
    
    RF24 radio(9,10);
    
    //
    // Topology
    //
    
    // Radio pipe addresses for the nodes to communicate.
    const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xE8E8F0F0E1LL };
    
    //
    // Role management
    //
    // Set up role.  This sketch uses the same software for all the nodes
    // in this system.  Doing so greatly simplifies testing.  
    //
    
    // The various roles supported by this sketch
    typedef enum { role_speak = 1, role_listen, role_none } role_e;
    
    // The role of the current running sketch
    role_e role = role_none;
    role_e newRole = role_none;
    
    unsigned long timeLastMessage = 0;

    //
    // Print preamble
    //


    //
    // Setup and configure rf radio
    //

    // optionally, increase the delay between retries & # of retries
    //  radio.setPayloadSize(sizeof(uint8_t));

end

#define SENSOR_THRESHOLD 500
#define SEND_INTERVAL 100

input none RADIO_AVAILABLE;
event none presence;
event none no_presence;

    _pinMode(A0,INPUT);
    _pinMode(LED_PIN,OUTPUT);
{
    radio.begin();
}
// Generate the event detector
spawn do
  loop do
    await async do
      if {radio.available()} as bool then
        emit RADIO_AVAILABLE;
      end
    end
  end
end

// Keep checking the button
spawn do
    loop do
        var int value = await Analog(0);
        if value > SENSOR_THRESHOLD then
            emit presence;
        else
            emit no_presence;
        end
    end
end

loop do
    // We can do one of two things here:
    // 1-Check the value variable
    // Await two different events that will be emitted
    // Based on the value of "value"
    // Can we make one abort when the event comes
    // and another one start?
    par/and do
        par/or do
            // abort when PRESENCE
            await presence;
        with
            // LISTEN TO NEIGHBOURS
            {
                timeLastMessage = millis();
                radio.openReadingPipe(1,pipes[1]);
                radio.startListening();
            }
            loop do
                par/or do
                await RADIO_AVAILABLE;
                {
                    bool done = false;
                    while (!done)
                    {
                      uint8_t signal_id = 0;
                      // Fetch the payload, and see if this was the last one.
                      done = radio.read( &signal_id, sizeof(uint8_t) );
                      // Delay just a little bit to let the other unit
                      // make the transition to receiver
                      delay(20);
                    }
                    analogWrite(LED_PIN,HALF_POWER);
                }
                with
                    await (SEND_INTERVAL * 2)ms;
                    {analogWrite(LED_PIN,LOW);}
                end
            end 
        end 
    with
        await presence;
        // SEND TO NEIGHBOURS
        {
            analogWrite(LED_PIN,FULL_POWER);
            radio.openWritingPipe(pipes[1]);
            //radio.openReadingPipe(1,pipes[0]);
            radio.stopListening();
        }
        par/or do
            // If doesnt receive presence in an interval of time then abort?
            // Alternative would be to have a different event for lack of presence?
            //loop do
            //    par/or do
            //        await SEND_INTERVAL ms;
            //    with
            //        await presence;
            //    end
            //end
            await no_presence;
            {analogWrite(LED_PIN,LOW);}
        with
            loop do
                var u8 radio_id = RADIO_ID;
                {
                    radio.write( &@radio_id, sizeof(uint8_t) );
                    //delay(SEND_INTERVAL);
                }
                await SEND_INTERVAL ms;
            end
        end
    end
end

