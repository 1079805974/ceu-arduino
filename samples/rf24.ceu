#include "arduino/isr/analog.ceu"
#include "arduino/isr/spi.ceu"
#include "timer.ceu"
#include "arduino/arduino.ceu"

    #define RADIO_ID 0x66
    
    #define SENSOR_PIN A0
    #define LED_PIN 3
    
    #define FULL_POWER 1023
    #define HALF_POWER 10

    #define SENSOR_THRESHOLD 500
    
    #define TIME_THRESHOLD 2000
 native/pre do
    /*
     * This application consists of a node of a distributed smart lighting system.
     */
    
    ##include <nRF24L01.h>
    ##include <RF24.h>
    
   
    //
    // Hardware configuration
    //
    
    // Set up nRF24L01 radio on SPI bus plus pins 9 & 10 
    
    RF24 radio(9,10);
    
    // Radio pipe addresses for the nodes to communicate.
    const uint64_t pipe = 0xF0F0F0F0E1LL;
end

native  _radio,
        _uint8_t,
        __BV,
        _FALLING,
        _W_REGISTER,
        _R_REGISTER,
        _W_TX_PAYLOAD,
        _REGISTER_MASK,
        _CONFIG,
        _PRIM_RX,
        _PWR_UP,
        _pipe;

#define SENSOR_THRESHOLD 500
#define SEND_INTERVAL 100
#define MHZ 1000000

input none RADIO;

event none presence;
event none no_presence;

spawn async/isr [_digitalPinToInterrupt(2),_FALLING] do
    emit RADIO;
end

#define csn(x) _digitalWrite(10,x);
#define ce(x) _digitalWrite(9,x);

code/await Radio_receive(none) -> byte do
    await RADIO;
    // Clear interrupt bit
    {radio.write_register(STATUS,_BV(RX_DR));}
    var byte signal_id = 0;
    {radio.read( &@signal_id, sizeof(uint8_t) );}
    escape signal_id;
end

code/await Write_register (var u8 reg, var u8 value) -> u8 do
    var u8 status = _;
    watching SPI_Transaction(4 * MHZ, SPI_MSBFIRST, SPI_MODE0) do
        csn(off);
        status = await SPI_Transfer(_W_REGISTER | ( _REGISTER_MASK & reg ) ); 
        await SPI_Transfer(value);
        csn(on);
    end
    escape status;
end

//code/await Read_register (var u8 reg) -> u8 do
//    var u8 value = _;
//    watching SPI_Transaction(4 * MHZ, SPI_MSBFIRST, SPI_MODE0) do
//        csn(off);
//        await SPI_Transfer(_R_REGISTER | ( _REGISTER_MASK & reg ) ); 
//        value = await SPI_Transfer(_);
//        csn(on);
//    end
//    escape value;
//end

_pinMode(_A0,_INPUT);
_pinMode(LED_PIN,_OUTPUT);

_radio.begin();
_radio.setPayloadSize(1);

// Disable interrupts other than receive payload
{radio.write_register(CONFIG, radio.read_register(CONFIG) | _BV(MASK_TX_DS) | _BV(MASK_MAX_RT));}

// Keep checking the button
spawn do
    loop do
        var int value = await Analog(0);
        if value > SENSOR_THRESHOLD then
            emit presence;
        else
            emit no_presence;
        end
    end
end

loop do
    par/and do
        par/or do
            // abort when PRESENCE
            await presence;
        with
            // LISTEN TO NEIGHBOURS
            _radio.openReadingPipe(0,_pipe);
            _radio.startListening();
            loop do
                par/or do
                    await Radio_receive();
                    _analogWrite(LED_PIN,HALF_POWER);
                with
                    await (SEND_INTERVAL * 2)ms;
                    _analogWrite(LED_PIN,off);
                end
            end 
        end 
    with
        await presence;
        // SEND TO NEIGHBOURS
        _analogWrite(LED_PIN,FULL_POWER);
        _radio.openWritingPipe(_pipe);
        _radio.stopListening();
        par/or do
            await no_presence;
            _analogWrite(LED_PIN,off);
        with
            loop do
                do finalize with
                    {radio.powerDown(); radio.flush_tx();}
                end
         //       {radio.write( &@radio_id, sizeof(uint8_t) );}
                {radio.write_register(CONFIG, (radio.read_register(CONFIG) | _BV(PWR_UP) ) & ~_BV(PRIM_RX) );}
                //await 1500 us;
                {delayMicroseconds(1500);}
                // write the payload
                await Write_register(_W_TX_PAYLOAD, RADIO_ID);
                ce(on);
                //await 15 us;
                {delayMicroseconds(15);}
                ce(off);
                {radio.write( NULL, sizeof(uint8_t) );}
                await SEND_INTERVAL ms;
            end
        end
    end
end

