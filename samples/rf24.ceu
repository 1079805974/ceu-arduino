#include "arduino/isr/analog.ceu"
#include "arduino/isr/timer.ceu"
#include "arduino/arduino.ceu"

    #define RADIO_ID 0x66
    
    #define SENSOR_PIN A0
    #define LED_PIN 3
    
    #define FULL_POWER 1023
    #define HALF_POWER 300

    #define SENSOR_THRESHOLD 500
    
    #define TIME_THRESHOLD 2000
 native/pre do
    /*
     * This application consists of a node of a distributed smart lighting system.
     */
    
    ##include <SPI.h>
    ##include <nRF24L01.h>
    ##include <RF24.h>
    
   
    //
    // Hardware configuration
    //
    
    // Set up nRF24L01 radio on SPI bus plus pins 9 & 10 
    
    RF24 radio(9,10);
    
    // Radio pipe addresses for the nodes to communicate.
    const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xE8E8F0F0E1LL };
end

native  _radio,
        _uint8_t,
        _pipes;

#define SENSOR_THRESHOLD 500
#define SEND_INTERVAL 100

input byte RADIO_AVAILABLE;
event none presence;
event none no_presence;

_pinMode(A0,INPUT);
_pinMode(LED_PIN,OUTPUT);

// Generate the event detector
spawn do
    _radio.begin();
    loop do
        await async do
            if _radio.available() as bool then
                var byte signal_id = 0;
                {radio.read( &@signal_id, sizeof(uint8_t) );}
                emit RADIO_AVAILABLE(signal_id);
            end
        end
    end
end

// Keep checking the button
spawn do
    loop do
        var int value = await Analog(0);
        if value > SENSOR_THRESHOLD then
            emit presence;
        else
            emit no_presence;
        end
    end
end

loop do
    par/and do
        par/or do
            // abort when PRESENCE
            await presence;
        with
            // LISTEN TO NEIGHBOURS
            _radio.openReadingPipe(1,_pipes[1]);
            _radio.startListening();
            loop do
                par/or do
                    await RADIO_AVAILABLE;
                    _analogWrite(LED_PIN,HALF_POWER);
                with
                    await (SEND_INTERVAL * 2)ms;
                    _analogWrite(LED_PIN,LOW);
                end
            end 
        end 
    with
        await presence;
        // SEND TO NEIGHBOURS
        _analogWrite(LED_PIN,FULL_POWER);
        _radio.openWritingPipe(_pipes[1]);
        _radio.stopListening();
        par/or do
            await no_presence;
            _analogWrite(LED_PIN,LOW);
        with
            loop do
                var u8 radio_id = RADIO_ID;
                {radio.write( &@radio_id, sizeof(uint8_t) );}
                await SEND_INTERVAL ms;
            end
        end
    end
end

