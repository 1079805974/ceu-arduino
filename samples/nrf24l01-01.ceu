#define CONFIG      0x00
#define EN_AA       0x01
#define EN_RXADDR   0x02
#define SETUP_AW    0x03
#define SETUP_RETR  0x04
#define RF_CH       0x05
#define RF_SETUP    0x06
#define STATUS      0x07
#define OBSERVE_TX  0x08
#define CD          0x09
#define RX_ADDR_P0  0x0A
#define RX_ADDR_P1  0x0B
#define RX_ADDR_P2  0x0C
#define RX_ADDR_P3  0x0D
#define RX_ADDR_P4  0x0E
#define RX_ADDR_P5  0x0F
#define TX_ADDR     0x10
#define RX_PW_P0    0x11
#define RX_PW_P1    0x12
#define RX_PW_P2    0x13
#define RX_PW_P3    0x14
#define RX_PW_P4    0x15
#define RX_PW_P5    0x16
#define FIFO_STATUS 0x17
#define DYNPD	    0x1C
#define FEATURE	    0x1D
    
/* Bit Mnemonics */
#define MASK_RX_DR  6
#define MASK_TX_DS  5
#define MASK_MAX_RT 4
#define EN_CRC      3
#define CRCO        2
#define PWR_UP      1
#define PRIM_RX     0
#define ENAA_P5     5
#define ENAA_P4     4
#define ENAA_P3     3
#define ENAA_P2     2
#define ENAA_P1     1
#define ENAA_P0     0
#define ERX_P5      5
#define ERX_P4      4
#define ERX_P3      3
#define ERX_P2      2
#define ERX_P1      1
#define ERX_P0      0
#define AW          0
#define ARD         4
#define ARC         0
#define PLL_LOCK    4
#define RF_DR       3
#define RF_PWR      6
#define RX_DR       6
#define TX_DS       5
#define MAX_RT      4
#define RX_P_NO     1
#define TX_FULL     0
#define PLOS_CNT    4
#define ARC_CNT     0
#define TX_REUSE    6
#define FIFO_FULL   5
#define TX_EMPTY    4
#define RX_FULL     1
#define RX_EMPTY    0
#define DPL_P5	    5
#define DPL_P4	    4
#define DPL_P3	    3
#define DPL_P2	    2
#define DPL_P1	    1
#define DPL_P0	    0
#define EN_DPL	    2
#define EN_ACK_PAY  1
#define EN_DYN_ACK  0
    
/* Instruction Mnemonics */
#define R_REGISTER    0x00
#define W_REGISTER    0x20
#define REGISTER_MASK 0x1F
#define ACTIVATE      0x50
#define R_RX_PL_WID   0x60
#define R_RX_PAYLOAD  0x61
#define W_TX_PAYLOAD  0xA0
#define W_ACK_PAYLOAD 0xA8
#define FLUSH_TX      0xE1
#define FLUSH_RX      0xE2
#define REUSE_TX_PL   0xE3
#define NOP           0xFF
    
/* Non-P omissions */
#define LNA_HCURR   0
    
/* P model memory Map */
#define RPD         0x09
    
/* P model bit Mnemonics */
#define RF_DR_LOW   5
#define RF_DR_HIGH  3
#define RF_PWR_HIGH 2
#define RF_PWR_LOW  1

#include "arduino/arduino.ceu"
#include "wclock.ceu"
#include "spi.ceu"
#include "pcint0.ceu"
#include "usart.ceu"

spawn Usart(9600);

var Lock spi = _;
spawn Spi();

event bool irq;
spawn PCInt_to_Event(10, false, &irq);

data Nrf24l01_ with
    var&   Lock spi;
    event& bool irq;
    var    int  ce;
    var    int  csn;

    var    byte config;
    event  none ok;
    event  none rx;
    event  none tx;
    event  none max;
end

var Nrf24l01_ nrf = val Nrf24l01_(&spi, &irq, 8,7, _,_,_,_,_);

code/await Nrf24l01_Write (var& Nrf24l01_ nrf, var byte reg, var byte value) -> byte do
    lock nrf.spi do
        watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
            var byte status = await SPI_Transfer(W_REGISTER | (REGISTER_MASK & reg));
            await SPI_Transfer(value);
            escape status;
        end
    end
end

code/await Nrf24l01_Writes (var& Nrf24l01_ nrf, var byte reg, var&[] byte values) -> byte do
    lock nrf.spi do
        watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
            var byte status = await SPI_Transfer(W_REGISTER | (REGISTER_MASK & reg));
            var usize i;
            loop i in [0 -> $values[ do
                await SPI_Transfer(values[i]);
            end
            escape status;
        end
    end
end

code/await Nrf24l01_Read (var& Nrf24l01_ nrf, var byte reg) -> byte do
    lock nrf.spi do
        watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
            await SPI_Transfer(R_REGISTER | (REGISTER_MASK & reg));
            var byte v = await SPI_Transfer(0xFF);
            escape v;
        end
    end
end

do
    _pinMode(nrf.ce,  _OUTPUT);
    _pinMode(nrf.csn, _OUTPUT);
    _digitalWrite(nrf.ce,  _LOW);
    _digitalWrite(nrf.csn, _HIGH);

    await 5ms;  // see RF24 library

    // set RF channel (76???)
    await Nrf24l01_Write(&nrf, RF_CH, 76);

    // RF24_2MBPS, 0dBm
    await Nrf24l01_Write(&nrf, RF_SETUP, _bit(RF_DR_HIGH)|_bit(RF_PWR_LOW)|_bit(RF_PWR_HIGH));

    // set pipe addresses, lengths
    var[5] byte addr = [0xEE, 0xDD, 0xCC, 0xBB, 0xAA];
    await Nrf24l01_Write (&nrf, EN_RXADDR,  _bit(ERX_P0));  // enables RX0 pipe
    await Nrf24l01_Writes(&nrf, RX_ADDR_P0, &addr);         // RX0 address
    await Nrf24l01_Write (&nrf, RX_PW_P0,   1);             // RX0 payload length
    await Nrf24l01_Writes(&nrf, TX_ADDR,    &addr);         // TX address

    // ACK=no
    await Nrf24l01_Write(&nrf, EN_AA, 0);

    // clears ISRs
    await Nrf24l01_Write(&nrf, STATUS, _bit(RX_DR)|_bit(TX_DS)|_bit(MAX_RT));

    // flush buffers
    lock nrf.spi do
        watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
            await SPI_Transfer(FLUSH_RX);
        end
        watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
            await SPI_Transfer(FLUSH_TX);
        end
    end

    // CRC = 2 bytes
    // POWER UP (TODO: finalize power down)
    nrf.config = (_bit(PWR_UP) | _bit(EN_CRC) | _bit(CRCO));
    await Nrf24l01_Write(&nrf, CONFIG, nrf.config);
    await 150ms;    // power up
end

output on/off PIN_13;
await 1s;

var int i;
loop i do
    emit PIN_13((i % 2) as on/off);

    // TX
    do
        await Nrf24l01_Write(&nrf, STATUS, _bit(RX_DR) | _bit(TX_DS) | _bit(MAX_RT));
        watching nrf.irq do
            await Nrf24l01_Write(&nrf, CONFIG, nrf.config | _bit(MASK_RX_DR));
            lock nrf.spi do
                watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
                    await SPI_Transfer(W_TX_PAYLOAD);
                    await SPI_Transfer(i);
                end
            end

            _digitalWrite(nrf.ce, 1);
            _delayMicroseconds(10);
            _digitalWrite(nrf.ce, 0);
            await FOREVER;
        end
        await Nrf24l01_Write(&nrf, STATUS, _bit(TX_DS) | _bit(MAX_RT));
    end

#if 0
    await (_random(500))ms;
#else
    // RX
    do
        await Nrf24l01_Write(&nrf, STATUS, _bit(RX_DR) | _bit(TX_DS) | _bit(MAX_RT));
        await Nrf24l01_Write(&nrf, CONFIG, nrf.config | _bit(PRIM_RX) | _bit(MASK_TX_DS) | _bit(MASK_MAX_RT));

        _digitalWrite(nrf.ce, 1);
        do finalize with
            _digitalWrite(nrf.ce, 0);
        end

        await nrf.irq;

        var byte v = _;
        lock nrf.spi do
            watching SPI_Transaction(4000000, SPI_MSBFIRST, SPI_MODE0, _, nrf.csn) do
                await SPI_Transfer(R_RX_PAYLOAD);
                var usize i;
                v = await SPI_Transfer(0xFF);
            end
        end

        await Nrf24l01_Write(&nrf, STATUS, _bit(RX_DR));

#if 1
        var[20] byte str = [{'0'}+(v%10)] .. "\n\r";
        await Usart_TX(&str);
#endif
    end
#endif
end
