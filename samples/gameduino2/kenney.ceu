#define NCLOUD  6
#define NHEART  6
#define NPLAYER 2
#define NTRAIL  5

input void GD_REDRAW;

native do
    #define HEART_SZ  (HEART_HEIGHT + 14)
    #include "kenney_assets.h"
end
_LOAD_ASSETS();

#if NCLOUD > 0
class Cloud with
do
    var int x = 16 * (_random(480) - (_CLOUD_WIDTH / 2));
    var int y = 16 * (_random(240) - (_CLOUD_HEIGHT / 2));
    var byte vel = _random(20);
    var byte lum = 128 + 5 * vel;

    every GD_REDRAW do
        _GD.Begin(_BITMAPS);
        _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
        _GD.BitmapHandle(_CLOUD_HANDLE);
        _GD.Cell(0);
        _GD.ColorA(lum);
        _GD.ColorRGB(lum, lum, lum);
        _GD.Vertex2f(x, y);
        y = y + (4 + (vel >> 3));
        
        if (y > (16 * 272)) then
            if(vel%2==0) then
                x = 16 * (_random(240) - (_CLOUD_WIDTH / 2));
            else
                x = 16 * (_random(240, 480) - (_CLOUD_WIDTH / 2));
            end
            y = y - 16 * (272 + _CLOUD_HEIGHT);
        end
    end
end
#endif

#if NHEART > 0
class Heart with
do
    await 7s;
    var int x = _random(16 * 480);
    var int y = 16 * _random(240);
    var int deg = _random(5) * 8;
    var byte dir = _random(0,1);
    every GD_REDRAW do
        _GD.BlendFunc(_SRC_ALPHA, _ONE_MINUS_SRC_ALPHA);
        _GD.ColorA(200);
        _GD.Begin(_BITMAPS);
        _GD.BitmapHandle(_HEART_HANDLE);
        _GD.Cell(0);
        _GD.cmd_loadidentity();
        _GD.cmd_translate(_F16(_HEART_SZ/2), _F16(_HEART_SZ/2));
        if( dir%2 == 0 ) then
            _GD.cmd_rotate(_DEGREES(deg));
        else
            _GD.cmd_rotate(_DEGREES(-deg));
        end
        deg = deg + 0.25;
        _GD.cmd_translate(_F16(-_HEART_WIDTH/2), _F16(-_HEART_HEIGHT/2));
        _GD.cmd_setmatrix();
        _GD.Vertex2f(x - (16 * _HEART_SZ / 2), y);
        y = y + 30 + (deg << 2);
        if(y > (16 * 272)) then
            x = _random(16 * 480);
            y = y - 16 * (272 + _HEART_SZ);
        end
    end
end
#endif

class Sun with
do
    await 5s;       /// moved this to the class (see below)
    var int size;   /// "size" is a much better name

    par do
        loop j in 30 do
            size = j * 20;
            await GD_REDRAW;
        end
        loop j in 20 do
            size = size - 20;
            await GD_REDRAW;
        end
        loop j in 5 do
            size = size + 20;
            await GD_REDRAW;
        end
        size = 400;
    with
        every GD_REDRAW do
            _GD.ColorRGB(_C1B);
            _GD.PointSize(size);
            _GD.Begin(_POINTS);
            _GD.Vertex2f(16*240, 16*136);
        end
    end
end

#if NPLAYER > 0

#if NTRAIL > 0
class Trail with
    var int tx,ty;
    var u32 color;
do
    var int size = 192;
    loop j in 15 do
        await GD_REDRAW;
        _GD.BlendFunc(_SRC_ALPHA, _ONE_MINUS_SRC_ALPHA);
        _GD.Begin(_POINTS);
        _GD.ColorA(0x90);
        _GD.ColorRGB(color);
        _GD.PointSize(size);
        _GD.Vertex2f(tx, ty);
        size = size - 1;
        ty = ty + 12;
    end
end
#endif

class Player with
    var int i;
do
    var int tmp = 0;
    var u32 color;
    pool Trail[NTRAIL] trails;
    every GD_REDRAW do
        var u16 a = tmp * 100;

        var int x, y;
        var u16 a2 = a << 1;
        var u16 a3 = a2 << 1;
      
        if(i==0) then
            x = 16 * 240 + _GD.rsin(16 * 120, a) + _GD.rsin(16 * 120, a2);
            y = 16 * 136 + _GD.rsin(16 * 70, a3);
            color = 0x8bcfba;
        else/if (i==1) then
            x = 16 * 240 + _GD.rsin(16 * 240, a);
            y = 16 * 100 + _GD.rsin(16 * 36, a2);
            color = 0x8db5e7;
        else
            x = 16 * 240 + _GD.rsin(16 * 240, a2);
            y = 16 * 135 + _GD.rsin(16 * 10, a) + _GD.rsin(16 * 18, a3);
            color = 0xf19cb7;
        end
        
        if ((tmp & 3) == 0) then
                spawn Trail in trails with
                    this.tx = x;
                    this.ty = y;
                    
                end;        
            end
        
        _GD.ColorRGB(0xffffff);
        _GD.ColorA(0xff);
        _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
        _GD.BitmapHandle(_PLAYER1_HANDLE);
        _GD.Begin(_BITMAPS);
        _GD.cmd_loadidentity();
        _GD.cmd_translate(_F16(_PLAYER1_SIZE / 2),_F16(_PLAYER1_SIZE / 2));
        _GD.cmd_rotate(a + i * 0x7000);
        _GD.cmd_translate(_F16(-_PLAYER1_WIDTH / 2),_F16(-_PLAYER1_HEIGHT / 2));
        _GD.cmd_setmatrix();
        _GD.Cell(i);
        _GD.Vertex2f(x - (16 * _PLAYER1_SIZE / 2),
                  y - (16 * _PLAYER1_SIZE / 2));
        tmp = tmp + 1;
    end
end

#endif

var Sun sun;

#if NCLOUD > 0
var Cloud[NCLOUD] clouds;
#endif

#if NPLAYER > 0
var int i = 0;
var Player[NPLAYER] player with
    this.i = i;
    i = i + 1;
end;
#endif

#if NHEART > 0
var Heart[NHEART] hearts;
#endif

var int y = 1648;

every GD_REDRAW do
    
    _GD.RestoreContext();
    _GD.Begin(_BITMAPS);
    _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
    _GD.BitmapHandle(_TILES_HANDLE);
    var int tmp = (y >> 5) * 15;
    
    var byte yo = y & 31;
    var byte ctr = 0;
    loop j in 10 do
        loop i in 15 do
            var byte t = _pgm_read_byte_near(_layer1_map + tmp + ctr);
            ctr = ctr + 1;
            if  (t != 0) then
                _GD.Cell(t - 1);
                _GD.Vertex2f(16*32*(i), 16 * ((32*(j))-yo));
            end
        end
    end
    y = y - 1;
end
