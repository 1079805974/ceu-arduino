input void GD_REDRAW;
input (int,int,int) GD_TOUCH;
input void DEAD;
input void HURT;

native do
    #include "nightstrike_welcome_assets.h"
    #include "nightstrike_1_assets.h"
    
    #define OBJ_N 2
    void* OBJS[OBJ_N];
    byte   OBJS_N = 0;
    
    enum {
        OBJ_NULL = 0,       // not used
        OBJ_TANK,           // base item
        OBJ_HELI,           // helicopter
        OBJ_MISSILE1,       // missile from base
        OBJ_MISSILE2,       // missile from helicopter
        OBJ_SOLDIER,        // soldier
        OBJ_MAX             // not used
    };

    /*
     * An NxN matix with collision information, e.g.:
     * SHIP1 does not collide with FIRE1 (idVSid[1][2]),
     *           but collides with FIRE2 (idVSid[1][4]).
     * An explosion (OBJ_EXPLOSION) collides with all objects (id[12][*]).
     */
     
    char idVSid[OBJ_MAX][OBJ_MAX] = {
        { 0, 0, 0, 0, 0, 0 },    // [00] NULL
        { 0, 0, 0, 0, 1, 0 },    // [01] TANK
        { 0, 0, 0, 1, 0, 0 },    // [02] HELI
        { 0, 0, 1, 0, 0, 1 },    // [03] MISSILE1
        { 0, 1, 0, 0, 0, 0 },    // [04] MISSILE2
        { 0, 0, 0, 1, 0, 0 },    // [05] SOLDIER
    //   00 01 02 03 04 05 06 07 08 09 10 11 12
    };
    
    
    
    static PROGMEM prog_uchar soldier_a[] = {0,0,0,1,1,2,2,3,3,4,4,4,5,5,6,6,7,7};
    static PROGMEM prog_uchar fire_a[] = {0,1,2,3,4,5,6,7,8, 9,9, 10,10, 11,11, 12,12, 13,13, 14,14, 15,15, 16,16};
    static PROGMEM prog_uchar explode_a[] = {0,1,2,3,4,5,5,6,6,7,7,8,8,9,9};
    byte aframes[] = {0x00, 0x01, 0x02, 0x81, 0x80, 0x03, 0x83};
    
    #define SOLDIER_LEFT   (-SOLDIER_RUN_WIDTH / 2)
    #define SOLDIER_RIGHT  (480 + (SOLDIER_RUN_WIDTH / 2))
    
    #define HELI_LEFT (-HELI_WIDTH / 2)
    #define HELI_RIGHT (480 + HELI_WIDTH / 2)
    
    #define HOMING_SPEED  32
    #define HOMING_SLEW  400
    static void blocktext(int x, int y, byte font, const char *s)
    {
      GD.SaveContext();
      GD.ColorRGB(0x000000);
      GD.cmd_text(x-1, y-1, font, 0, s);
      GD.cmd_text(x+1, y-1, font, 0, s);
      GD.cmd_text(x-1, y+1, font, 0, s);
      GD.cmd_text(x+1, y+1, font, 0, s);
      GD.RestoreContext();

      GD.cmd_text(x, y, font, 0, s);
    }
    
    void draw_dxt1(byte color_handle, byte bit_handle)
    {
      GD.Begin(BITMAPS);

      GD.BlendFunc(ONE, ZERO);
      GD.ColorA(0x55);
      GD.Vertex2ii(0, 0, bit_handle, 0);

      GD.BlendFunc(ONE, ONE);
      GD.ColorA(0xaa);
      GD.Vertex2ii(0, 0, bit_handle, 1);

      GD.ColorMask(1,1,1,0);
      GD.cmd_scale(F16(4), F16(4));
      GD.cmd_setmatrix();

      GD.BlendFunc(DST_ALPHA, ZERO);
      GD.Vertex2ii(0, 0, color_handle, 1);

      GD.BlendFunc(ONE_MINUS_DST_ALPHA, ONE);
      GD.Vertex2ii(0, 0, color_handle, 0);

      GD.RestoreContext();
    }
    
    void vertex(byte cell, byte scale, const shape_t *shape, int x, int y) {
        int x0, y0;
        x0 = x - (shape->w >> 1) * scale;
        y0 = y - (shape->h >> 1) * scale;
        if (((x0 | y0) & 511) == 0) {
          GD.Vertex2ii(x0, y0, shape->handle, cell);
        } else {
          GD.BitmapHandle(shape->handle);
          GD.Cell(cell);
          GD.Vertex2f(x0 << 4, y0 << 4);
        }
      }
      
      void load_level(int n){

        GD.Clear();
        GD.cmd_text(240, 110, 29, OPT_CENTER, "LEVEL");
        GD.cmd_number(240, 145, 31, OPT_CENTER, n + 1);
        GD.swap();
        GD.finish();

        char filename[] = "night#.gd2";
        filename[5] = '0' + (n % 5);
        GD.load(filename);
      }
    
    void drawtemp(const shape_t *shape, byte scale = 1){
          GD.cmd_translate(F16(shape->w / 2), F16(shape->h / 2));
          GD.cmd_scale(F16(-scale), F16(scale));
          GD.cmd_translate(F16(-(shape->w / 2)), F16(-(shape->h / 2)));
          GD.cmd_setmatrix();
    }
    
    void drawmissile(const shape_t *shape, uint16_t angle, int x, int y, int cell = 0){
        GD.cmd_loadidentity();
        GD.cmd_translate(F16(shape->size / 2), F16(shape->size / 2));
        GD.cmd_rotate(angle);
        GD.cmd_translate(F16(-(shape->w / 2)), F16(-(shape->h / 2)));
        GD.cmd_setmatrix();
        
        int x0, y0;
        x0 = x - (shape->size << 3);
        y0 = y - (shape->size << 3);
        GD.BitmapHandle(shape->handle);
        GD.Cell(cell);
        GD.Vertex2f(x0, y0);
    }
    
    void draw_status(int power) {
        GD.SaveContext();
        GD.Begin(LINES);

        GD.ColorA(0x70);

        GD.ColorRGB(0x000000);
        GD.LineWidth(5 * 16);
        GD.Vertex2ii(10, 10);
        GD.Vertex2ii(10 + 460, 10);

        if (power > 20) {
          int x0 = (240 - power);
          int x1 = (240 + power);

          GD.ColorRGB(0xff6040);
          GD.Vertex2ii(x0, 10);
          GD.Vertex2ii(x1, 10);

          GD.ColorA(0xff);
          GD.ColorRGB(0xffd0a0);
          GD.LineWidth(2 * 16);
          GD.Vertex2ii(x0, 10);
          GD.Vertex2ii(x1, 10);
        }
        GD.RestoreContext();
        GD.ColorA(0xf0);
        GD.ColorRGB(0xd7f2fd);
        GD.Begin(BITMAPS);
        GD.cmd_text(3, 16, INFOFONT_HANDLE, 0, "$");
        //GD.cmd_number(15, 16, INFOFONT_HANDLE, 0, cash);

        //GD.cmd_number(30, 32, INFOFONT_HANDLE, OPT_RIGHTX, life);
        GD.cmd_text(30, 32, INFOFONT_HANDLE, 0, "/100");
      }
end

_GD.load("nightw.gd2");

/*
/// THE OPENING SEQUENCE

do
    native do
        Streamer stream;
    end
    _stream.begin("mesmeriz.ima");
    var int on? = true;
    par/or do
        every 500ms do
            on? = not on?;
        end
    with
        every GD_REDRAW do
            _draw_dxt1(BACKGROUND_COLOR_HANDLE, BACKGROUND_BITS_HANDLE);
            _GD.ColorRGB(0xd7f2fd);
            _blocktext(25, 16, WELCOME_DISPLAYFONT_HANDLE, "NIGHTSTRIKE");
            _GD.Tag(100);
            if(on?) then
                _blocktext(51, 114, WELCOME_DISPLAYFONT_HANDLE, "START");
            end
            if (_stream.feed() == 0) then
                _GD.sample(0, 0, 0, 0);
            end
        end
    with
        var int x,y,tag;
        (x,y,tag) = await GD_TOUCH
                        until tag == 100;
    end
end

/// END OF OPENING SEQUENCE
*/

interface Collidable with
    var byte cid;
    var byte cx, cy;
    event void hit;
end

class Fires with
    var int x, y;
do
    var int t = 0;
    
    x = x >> 4;
    y = y >> 4;
    native do
        const shape_t *shape3;
    end
    _shape3 = &_FIRE_SHAPE;
    var int anim = 0;
    every GD_REDRAW do
        if( anim == 24) then
            break;
        end
        _vertex( _pgm_read_byte(_fire_a + anim), 1, _shape3, x, y );
        if( t % 2 == 0 ) then
            anim = anim + 1;
        end
        t = t + 1;
    end
end

class Explosion with
    var int x, y;
    var u16 angle = 0xc000;
do
    native do
        const shape_t * shape9;
    end
    _shape9 = &_EXPLODE_BIG_SHAPE;
    var byte frame = 0;
    _GD.play(_KICKDRUM);
    var byte i = 0;
    loop i in 29 do
        await GD_REDRAW;
        _GD.Begin(_BITMAPS);
        _GD.SaveContext();
        _drawmissile(_shape9, angle, x, y, _pgm_read_byte( _explode_a + frame ));
        _GD.RestoreContext();
        if(i % 2 == 0) then
            frame = frame + 1;
        end
    end
end

class Missile with
    var int x,y;
    interface Collidable;
do
    var int dir;
    var s8 th, ts;
    var s16 vx,vy;
    native do
         const shape_t *shape2;
    end
    var u16 angle = 0x4000,a;
    vx = -_GD.rsin(10, angle);
    vy =  _GD.rcos(10, angle);
    th = 0;
    ts = -1;
    _shape2 = &_MISSILE_C_SHAPE;
    var int t = 0;
    if (angle == 0xc000) then
        dir = 1;
    else
        dir = -1;
    end
    pool Fires[6] f;
    this.cid = _OBJ_MISSILE2;
    this.cx = x;
    this.cy = y;
    
    every GD_REDRAW do
        _GD.Begin(_BITMAPS);
        vx = -_GD.rsin(_HOMING_SPEED, angle);
        vy = _GD.rcos(_HOMING_SPEED, angle);
        var s16 dy = (16 * 272) - y;
        var s16 dx = (16 * 240) - x;
        var u16 seek = _GD.atan2(dy, dx);
        var s16 steer = seek - angle;
        if (_abs(steer) > _HOMING_SLEW) then
            angle = angle - (dir * _HOMING_SLEW);
        else
            dir = 0;
        end
        
        x = x + vx;
        y = y + vy;
        _GD.SaveContext();
        _drawmissile(_shape2, angle, x, y);
        _GD.RestoreContext();
        
        this.cid = 0;
        this.cx = x;
        this.cy = y;
        
        if( (t & 7) == 0) then
            a = 0x8000 + angle; 
            spawn Fires in f with
                this.x = x - _GD.rsin(22 * 16, a);
                this.y = y + _GD.rcos(22 * 16, a);
            end;
        end
        
        dx = _abs((x >> 4) - 240);
        dy = _abs((y >> 4) - 270);
        
        if ( dx < 50 and dy < 50 ) then
            async do
                emit HURT;
            end;
            break;
        end
        
        t = t  + 1;
    end
    _GD.play(_TUBA, 108);
    await 100ms;
    var Explosion e;
        e.x = x;
        e.y = y;
        e.angle = angle;
    await 300ms;
end

class Soldier with
    interface Collidable;
do
    var int x,y;
    var s8 vx;
    native do
         const shape_t *shape;
    end
    _shape = &_SOLDIER_RUN_SHAPE;
    y = 272 - _SOLDIER_RUN_HEIGHT / 2;
    var int t = 0;
    var byte a = 0;
    if (_rand() %2 ) then
        x = _SOLDIER_LEFT;
        vx = 1;
    else
        x = _SOLDIER_RIGHT;
        vx = -1;
    end

    this.cid = _OBJ_SOLDIER;
    this.cx = x;
    this.cy = y;
    par/or do 
        every GD_REDRAW do                 
            _GD.Begin(_BITMAPS);

            if (vx == 1) then
                _GD.SaveContext();
                _GD.cmd_loadidentity();
                _drawtemp(_shape);
            end
                
            _vertex(_pgm_read_byte(_soldier_a + a), 1, _shape, x,y);
            _GD.RestoreContext();
            x = x + vx;
            t = t + 1;
            if (t % 2 == 0) then
                a = (a + 1) % _sizeof(_soldier_a);
            end
            this.cid = _OBJ_SOLDIER;
            this.cx = x;
            this.cy = y;
            _OBJS[_OBJS_N] := &this;
            _OBJS_N = _OBJS_N + 1;
        end
    with
        await hit;
    end
    var Explosion e;
        e.x = x;
        e.y = y;
    await 300ms;
end

class Heli with
    interface Collidable;
do
    var int x,y;
    var s8 vx;
    native do
         const shape_t *shape1;
         const shape_t *shape1die;
    end
    _shape1 = &_HELI_SHAPE;
    y = (_HELI_HEIGHT / 2 ) + _GD.random(100);
    var int t = 0;    
    //pool Missile[1] m;
    if( _rand() % 2 ) then
        x = _HELI_RIGHT;
        vx = -1;
    else
        x = _HELI_LEFT;
        vx = 1;
    end
    
    this.cid = _OBJ_HELI;
    this.cx = x;
    this.cy = y;
    
    par/or do
        every GD_REDRAW do
            _GD.Begin(_BITMAPS);
            if (vx == 1) then
                _GD.SaveContext();
                _GD.cmd_loadidentity();
                _drawtemp(_shape1);
            end
            _vertex((t>>2 & 1), 1, _shape1, x, y);
            _GD.RestoreContext();
            t = t  + 1;
            x = x + vx;
            this.cid = _OBJ_HELI;
            this.cx = x;
            this.cy = y;
            _OBJS[_OBJS_N] := &this;
            _OBJS_N = _OBJS_N + 1;
        end
    /*
    with
        await 3s;
        spawn Missile in m with
            this.x = x << 4;
            this.y = y << 4;
        end;
        await FOREVER;
    */
    with
        await hit;
    with
        await DEAD;
    end
    
    //Helicopter dying sequence:
    _GD.play(_TUBA, 36);
    _shape1die = &_COPTER_FALL_SHAPE;
    var byte vy = 4;

    par/or do
        var byte frame = 0, aframe, a;
        every GD_REDRAW do
            a = _aframes[(frame >> 1) % _sizeof(_aframes)];
            
            _GD.Begin(_BITMAPS);
            _GD.SaveContext();
            _GD.cmd_loadidentity();
                
            _drawtemp(_shape1die, 2);
            _vertex( a & 0x7f , 2,_shape1die,x,y);
            _GD.RestoreContext();
            y = y + vy;
            vy = _min(vy + 1, 6);
            frame = frame + 1;
        end
    with
        every GD_REDRAW do
            if( y > 252) then
                break;
            end
        end
    end
    par/or do
        var Explosion e;
                e.x = 100;
                e.y = 100;
                e.angle = 0xc000;
        await FOREVER;
    with
        await 300ms;
    end
end

class MissileBase with
    interface Collidable;
    var u16 angle, vel;
do
    var int x,y;
    var s8 th, ts;
    var s16 vx,vy;
    native do
         const shape_t *shape4;
    end
    var u16 a;
    x = 16 * 240 - _GD.rsin( 16 * 110, angle);
    y = 16 * 265 + _GD.rcos( 16 * 110, angle);

    vx = -_GD.rsin(vel, angle);
    vy =  _GD.rcos(vel, angle);
    th = 0;
    ts = 0;
    _shape4 = &_MISSILE_A_SHAPE;
    var int t = 0;
    this.cid = _OBJ_MISSILE1;
    this.cx = x;
    this.cy = y;
        every GD_REDRAW do
            
            _GD.ColorA(255);
            _GD.Begin(_BITMAPS);
            angle = _GD.atan2(vy, vx);
            vy = vy + 4;
            
            if (y > 4000) then
                break;
            end

            x = x + vx;
            y = y + vy;
            
            _GD.SaveContext();
            _drawmissile(_shape4, angle, x, y);
            _GD.RestoreContext();
            
            
            this.cid = _OBJ_MISSILE1;
            this.cx = x;
            this.cy = y;
            
            _OBJS[_OBJS_N] := &this;
            _OBJS_N = _OBJS_N + 1;
            t = t  + 1;
        end
        par/or do
            var Explosion e;
                e.x = x;
                e.y = y;
                e.angle = 0x0000;
            await FOREVER;
        with
            await 300ms;
        end
end

class Turret with
do
    native do
        const shape_t *shape6;
    end
    var int x, y;
    _shape6 = &_DEFENSOR_TURRET_SHAPE;
    var u16 angle = 0x7000;
    pool MissileBase[2] m;
    
    var byte touching = 0, power = 0;
    par do
        every GD_REDRAW do
            x = 16*240 - _GD.rsin(16*77, angle);
            y = 16*265 + _GD.rcos(16*77, angle);
            _GD.SaveContext();
            _drawmissile(_shape6, angle, x, y);
            _GD.RestoreContext();
        end
    with
        loop do
            await GD_REDRAW;
            _GD.get_inputs();
            var int tch = _GD.inputs.x;
            if ((_GD.inputs.track_tag & 0xff) == 1) then
                angle = _GD.inputs.track_val;
            end
            if(tch == -32768 and touching == 1) then
                if (power > 20) then
                    _GD.play(_HIHAT);
                    spawn MissileBase in m with
                        this.angle = angle;
                        this.vel = power;
                    end;
                end
                power = 0;
                touching = 0;
            else/if (tch != -32768 and touching == 0) then
                touching = 1;
                power = 30;
            else/if (tch != -32768 and touching == 1) then
                power = _min(230, power + 3);
            end
            _draw_status(power);
        end
    end
end

class Base with
    interface Collidable;
do
    native do
        const shape_t *shape5;
    end
    _shape5 = &_DEFENSOR_FRONT_SHAPE;
    var int x, y;
    x = 240;
    y = 242;
    var byte power = 0;
    var u32 cash = 0;
    var byte life = 100;
    var Turret t;
    this.cid = _OBJ_TANK;
    this.cx = x;
    this.cy = 270;
    var byte hurt = 0;
    par do
        loop do
            await HURT;
            hurt = 1;
            loop i in 16 do
                await GD_REDRAW;
                _GD.ColorA(255 - (i + 1) * 16);
                _GD.ColorRGB(0xff0000);
                _GD.PointSize(50 * 16 + (i + 1) * 99);
                _GD.Begin(_POINTS);
                _GD.Vertex2ii(240, 270);
                _GD.ColorA(255);
                _GD.ColorRGB(0xffffff);
                _GD.Begin(_BITMAPS);
            end
            hurt = 0;
        end
    with
        every GD_REDRAW do
            _GD.ColorRGB(0x000000);
            _vertex(0, 1, _shape5, x, y);
            if(hurt) then
                _GD.ColorRGB(0xff0000);
            else
                _GD.ColorRGB(0xffffff);
            end
            _vertex(1, 1, _shape5, x, y);
            _GD.ColorRGB(0xffffff);
        end
    end
end

//pool Soldier[] s1;
_GD.cmd_track(240, 271, 1, 1, 0x01);
var byte level = 0;

loop do
    _load_level(level);
    level = level + 1;

    par/or do
        every GD_REDRAW do
            _GD.RestoreContext();
            _GD.Tag(1);
            _draw_dxt1(BACKGROUND_COLOR_HANDLE, BACKGROUND_BITS_HANDLE);
            _GD.TagMask(0);
            _GD.Begin(_BITMAPS);
        end
    with
        var Base b;
        //var Explosion e;
        loop do
            await GD_REDRAW;
            if(_rand() % 2) then
                var Soldier s;
                //var Heli h;
                //spawn Soldier in s1;
                await 10s;
            end
        end
    with
        await (5 + 5 * level)s;         // time for each level
    
    with
        every GD_REDRAW do
            finalize with
                _OBJS_N = 0;
            end
            loop i in _OBJS_N do
                var Collidable* o1 = (Collidable*) _OBJS[i];
                if(o1 == null) then
                    break;
                end
                if(o1:cid != _OBJ_MISSILE1) then
                    continue;
                end
                loop j in _OBJS_N do
                    var Collidable* o2 = (Collidable*) _OBJS[j];
                    if(o2 == null) then
                        break;
                    end
                    if(o2:cid != _OBJ_HELI and o2:cid != _OBJ_SOLDIER) then
                        continue;
                    end
                    
                    var byte dx = _abs((o1:cx >> 4) - o2:cx );
                    var byte dy = _abs((o1:cy >> 4) - o2:cy );
                    
                    emit o2:hit;
                    if(dx >= 32 or dy >= 32) then
                        continue;
                    end
                    
                    //emit o2:hit;
                    
                    if(_idVSid[o1:cid][o2:cid]) then
                        emit o2:hit;
                        /*async do
                            emit DEAD;
                        end*/
                    end
                end         // end of loop j
            end             // end of loop i
            _OBJS_N = 0;
        end                 // end of GD_REDRAW
    end                 // end of par/or
end
