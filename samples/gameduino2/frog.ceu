input void GD_REDRAW;
input int FR_DONE;

#define CONTROL_LEFT  1
#define CONTROL_RIGHT 2
#define CONTROL_UP    4
#define CONTROL_DOWN  8

var int lives, hiscore = 0;

class Keyboard with
do
    #define PADX(x) (480 + (x - 3) * 48)
    #define PADY(y) (272 + (y - 3) * 48)
    
    every GD_REDRAW do
        _GD.Begin(_BITMAPS);
        
        _GD.Tag(CONTROL_RIGHT);
        _GD.Vertex2ii(PADX(2), PADY(1), _ARROW_HANDLE, 0);
        _rotate_around(24, 24, 3 * 0x4000);

        _GD.Tag(CONTROL_UP);
        _GD.Vertex2ii(PADX(1), PADY(0), _ARROW_HANDLE, 0);
        _rotate_around(24, 24, 2 * 0x4000);

        _GD.Tag(CONTROL_LEFT);
        _GD.Vertex2ii(PADX(0), PADY(1), _ARROW_HANDLE, 0);
        _rotate_around(24, 24, 1 * 0x4000);
        
        _GD.Tag(CONTROL_DOWN);
        _GD.Vertex2ii(384, 224, _ARROW_HANDLE, 0);
        _GD.RestoreContext();
    end
end

class Frog with
    event void dead,die,finish;
    var int score;
do
    var int x,y,leaping,frogdir,frogface,t = 0,tag,win;
    var int[5] done;
    var byte[5] homes;
    homes[0] = 24;
    homes[1] = 72;
    homes[2] = 120;
    homes[3] = 168;
    homes[4] = 216;
    done[0] = 0;
    done[1] = 0;
    done[2] = 0;
    done[3] = 0;
    done[4] = 0;
    x = 120;
    y = 232;
    leaping = 0;
    frogdir = 0;
    frogface = 0x0000;
    score = 0;

    // Alive sequence. Win = 1 if frog has completed all homes successfully.
    win = 
        par do
            // Get touch input, Change frog position.
            every GD_REDRAW do
                _GD.wr(_REG_TAG_X, x - 8);
                _GD.wr(_REG_TAG_Y, y);
                _GD.get_inputs();
                tag = _GD.rd(_REG_TAG);
                var byte r = _GD.inputs.tag;  //& (CONTROL_LEFT | CONTROL_RIGHT | CONTROL_UP | CONTROL_DOWN);
                if(r != 0 and leaping==0) then
                    frogdir = r;
                    score = score + 10;
                    leaping = 1;
                else/if (leaping>0 and leaping<=8) then
                    if (frogdir == CONTROL_LEFT) then
                        x = x - 2;
                        frogface = 0xc000;
                    else/if (frogdir == CONTROL_RIGHT) then
                        x = x + 2;
                        frogface = 0x4000;
                    else/if (frogdir == CONTROL_UP) then
                        y = y - 2;
                        frogface = 0x0000;
                    else/if (frogdir == CONTROL_DOWN) then
                        y = y + 2;
                        frogface = 0x8000;
                    end
                    leaping = leaping + 1;
                 else
                     leaping = 0;
                 end
            end
        with
            // Check if frog has collided
            loop do
                await GD_REDRAW;
                if( not leaping ) then
                    if(y >= 136 ) then     // road section
                        if (tag == 2) then
                            escape 0;
                        end
                    else/if ( y>40 ) then  // river section
                        if ( tag == 1 ) then
                            escape 0;
                        end
                        var int oldx = _riverat(y, t - 1);
                        var int newx = _riverat(y, t);
                        var int river_velocity = newx - oldx;
                        x = x + river_velocity;
                    else                   // river bank
                        var int landed = 0;
                        loop i in 5 do
                            if( not done[i] and _abs(homes[i] - x) < 4 ) then
                                done[i] = 1;
                                landed = 1;
                            end
                        end
                        if (landed) then
                            x = 120;
                            y = 232;
                            leaping = 0;
                            frogdir = 0;
                            frogface = 0x0000;
                            landed = 0;
                            if( done[0] and done[1] and done[2] and done[3] and done[4] ) then
                                escape 1;
                            end
                        else
                            escape 0;
                        end
                    end
                end
            end
            
        with
            // Draw the frog on every frame.
            every GD_REDRAW do
                native do
                    static byte frog_anim[] = {2, 1, 0, 0, 2};
                end
                loop i in 5 do
                    if( done[i] ) then
                        _sprite( homes[i], 40, 63);
                    end
                end
                _sprite(x, y, _frog_anim[leaping / 2], frogface);
                t = t + 1;
            end
        with
            await 123s;
            escape 0;
        end;
    
    if(not win) then
        // if dead, perform dying sequence
        var int frame;
        par/or do
            frame = 1;
            loop i in 63 do
                await GD_REDRAW;
                frame = frame + 1;
            end
        with
            every GD_REDRAW do
                native do
                    static byte die_anim[] = {31, 32, 33, 30};
                end
                _sprite(x, y, _die_anim[frame / 16], frogface);
            end
        end
        emit this.dead;
    else
        emit this.finish;
    end
end


native do
    #include "frogger_assets.h"
    
    static void sprite(byte x, byte y, byte anim, uint16_t rot = 0xffff)
    {
        x -= 16;
        y -= 8;
        if (rot != 0xffff) {
            GD.cmd_loadidentity();
            GD.cmd_translate(F16(8),F16(8));
            GD.cmd_rotate(rot);
            GD.cmd_translate(F16(-8),F16(-8));
            GD.cmd_setmatrix();
        }
        if (x > 224) {
            GD.Cell(anim);
            GD.Vertex2f(16 * (x - 256), 16 * y);
        } else {
            GD.Vertex2ii(x, y, SPRITES_HANDLE, anim);
        }
    }
    
    static void turtle3(byte x, byte y, int t)
    {
        byte anim = 50 + ((t / 32) % 3);
        sprite(x, y, anim);
        sprite(x + 16, y, anim);
        sprite(x + 32, y, anim);
    }

    static void turtle2(byte x, byte y, int t)
    {
        byte anim = 50 + ((t / 32) % 3);
        sprite(x, y, anim);
        sprite(x + 16, y, anim);
    }

    void log1(byte x, byte y)
    {
        sprite(x, y,      86);
        sprite(x + 16, y, 87);
        sprite(x + 32, y, 88);
    }

    void log(byte length, byte x, byte y)
    {
        sprite(x, y,      86);
        while (length--) {
            x += 16;
            sprite(x, y, 87);
        }
        sprite(x + 16, y, 88);
    }

    static int riverat(byte y, uint16_t tt)
    {
        switch (y) {
            case 120: return -tt;
            case 104: return tt;
            case 88:  return 5 * tt / 4;
            case 72:  return -tt / 2;
            case 56:  return tt / 2;
        }
    }
      
    static void rotate_around(int x, int y, int a)
    {
        GD.cmd_loadidentity();
        GD.cmd_translate(F16(x),F16(y));
        GD.cmd_rotate(a);
        GD.cmd_translate(F16(-x),F16(-y));
        GD.cmd_setmatrix();
    }
    
    void redraw(int t)
    {
        GD.Tag(2);
        GD.AlphaFunc(GREATER, 0); // on road, don't tag transparent pixels
        
        // Yellow cars
        sprite(-t,       216, 3);
        sprite(-t + 128, 216, 3);

        // Dozers
        sprite(t, 200, 4);
        sprite(t + 50, 200, 4);
        sprite(t + 150, 200, 4);

        // Purple cars
        sprite(-t,       184, 7);
        sprite(-t + 75,  184, 7);
        sprite(-t + 150, 184, 7);

        // Green and white racecars
        sprite(2 * t,    168, 8);

        // Trucks
        sprite(-t/2,       152, 5);
        sprite(-t/2 + 16,  152, 6);
        sprite(-t/2 + 100, 152, 5);
        sprite(-t/2 + 116, 152, 6);

        GD.AlphaFunc(GREATER, 0); // on river, tag transparent pixels

        // Turtles
        for (int i = 0; i < 256; i += 64)
          turtle3(riverat(120, t) + i, 120,t);

        // Short logs
        for (int i = 0; i < 240; i += 80)
          log(1, riverat(104, t) + i, 104);

        // Long logs
        for (int i = 0; i < 256; i += 128)
          log(5, riverat(88, t) + i, 88);

        // Turtles again, but slower
        for (int i = 0; i < 250; i += 50)
          turtle2(riverat(72, t) + i, 72,t);

        // Top logs
        for (int i = 0; i < 210; i += 70)
          log(2, riverat(56, t) + i, 56);
        
        GD.TagMask(0);
    }
end

_LOAD_ASSETS();


lives = 4;
loop do
    lives = 4;
    var int win = 1;
    var Keyboard kb;
    par/or do
        _GD.Clear();
        var int t = 0;    
        every GD_REDRAW do 
            _GD.Tag(1);
            _GD.BitmapHandle(_SPRITES_HANDLE);
            _GD.SaveContext();
            _GD.ScissorSize(224, 256);
            _GD.Begin(_BITMAPS);
            _GD.Vertex2ii(0, 0, _BACKGROUND_HANDLE, 0);   // Background bitmap
            _redraw(t);
            t = t + 1;
        end
    with 
        loop do    
            if(lives == 0) then
                win = 0;
                break;
            end
            var Frog frog;
            par/or do
                var int time = 66;
                var byte tw = 0;
                every GD_REDRAW do
                    _GD.SaveContext();
                    _GD.Begin(_RECTS);
                    _GD.ColorRGB(0x000000);
                    _GD.Vertex2ii(72,248);
                    _GD.Vertex2ii(time,255);
                    if(tw % 60 == 0) then
                        time = time + 1;
                    end
                    tw = tw + 1;
                    
                    _GD.RestoreContext();
                    
                    _GD.Begin(_BITMAPS);
                    
                    _GD.RestoreContext();
                    _GD.ScissorSize(224, 256);
                    
                    _GD.ColorRGB(255, 85, 0);
                    hiscore = _max(frog.score,hiscore);
                    _GD.cmd_number( 3 * 8, 1 * 8, _FONT_HANDLE, 5, frog.score);
                    _GD.cmd_number(11 * 8, 1 * 8, _FONT_HANDLE, 5, hiscore);
                    
                    _GD.ColorRGB(255, 255, 255);
                    loop j in lives do
                        _GD.Vertex2ii(8 * j, 30 * 8, _LIFE_HANDLE, 0);
                    end
                end
            with    
                await frog.dead;
                lives = lives - 1;
            with 
                await frog.finish;
                break;
            end
        end
    end
    
    par/or do
        loop do
            await GD_REDRAW;
            _GD.get_inputs();
            if(_GD.inputs.x != -32768) then
                break;
            end
        end
    with
         if not win then
             every GD_REDRAW do
                 // Draw "F R O G G E R" using the sprites 90-94
                 _GD.Clear();
                  var int x = 160, y = 50, space = 24;
                  _GD.Begin(_BITMAPS);
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 90); x = x + space;   // F
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 91); x = x + space;   // R
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 92); x = x + space;   // O
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 93); x = x + space;   // G
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 93); x = x + space;   // G
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 94); x = x + space;   // E
                  _GD.Vertex2ii(x, y, _SPRITES_HANDLE, 91); x = x + space;   // R
                  _GD.cmd_text(240, 136, _FONT_HANDLE, _OPT_CENTER, "GAME OVER");
                  _GD.cmd_text(240, 200, _FONT_HANDLE, _OPT_CENTER, "PRESS TO PLAY");
                  
             end
         end
    end
end