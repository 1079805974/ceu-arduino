input void GD_REDRAW;
input (int,int,int) GD_TOUCH;

native do
    #include "jnr_assets.h"
end
_LOAD_ASSETS();
native do
    #define BASEINIT 240UL
    static byte level[240] = {
      0xff,
      0xe2,
      0xe2,
      0xc0,
      0x44,
      0x40,
      0x04,
      0x40,
      0x44,
      0x00,
      0x04,
      0x40,
      0x5c,
      0x08,
    };

    int mapxy(int x, int y)
    {
      if (x < 0)
        return 0;
      if (y < 0)
        return 0;
      if (8 <= y)
        return 0;
      if (240 <= y)
        return 0;
      return 1 & (level[x] >> y);
    }

    static void parallax(int x, int y)
    {
      x %= 400;
      GD.Vertex2f(16 * -x, 16 * y);
      GD.Vertex2f(16 * (-x + 400), 16 * y);
    }

    static void draw(int xx)
    {
      GD.Clear();
      GD.ScissorSize(480, 240);

      GD.ClearColorRGB(0x2578c5);
      GD.Clear();
      GD.Begin(BITMAPS);

      GD.BitmapHandle(LAYER1_HANDLE);
      GD.ColorRGB(0x9ae8ff);
      parallax(xx >> 4, 0);

      GD.BitmapHandle(LAYER2_HANDLE);
      GD.ColorRGB(0x85d2e9);
      parallax(xx >> 3, 240 - LAYER2_HEIGHT);

      GD.BitmapHandle(LAYER3_HANDLE);
      GD.ColorRGB(0x67b0c5);
      parallax(xx >> 2, 240 - LAYER3_HEIGHT);

      GD.BitmapHandle(LAYER4_HANDLE);
      GD.ColorRGB(0x549faa);
      parallax(xx >> 1, 240 - LAYER4_HEIGHT);

      GD.ColorRGB(0xffffff);
      GD.BitmapHandle(TILES_HANDLE);
      int bx = xx / 32;
      for (int x = 0; x < 16; x++)
        for (int y = 0; y < 8; y++) {
          byte index = 0;
          if (mapxy(bx + x, y)) {
            if (mapxy(bx + x, y - 1))
              index += 1;
            if (mapxy(bx + x + 1, y))
              index += 2;
            if (mapxy(bx + x, y + 1))
              index += 4;
            if (mapxy(bx + x - 1, y))
              index += 8;
          } else {
            index = 17;
          }
          GD.Tag(128 + 8 * x + y);
          GD.Cell(index);
          GD.Vertex2f(16 * (-(xx & 31) + 32 * x), 16 * 32 * y);
        }

      GD.RestoreContext();
      GD.cmd_scale(F16(16), F16(16));
      GD.cmd_setmatrix();
      GD.BitmapHandle(CHECKER_HANDLE);
      GD.BitmapSize(NEAREST, REPEAT, REPEAT, 512, 32);
      GD.Cell(0);
      GD.Vertex2f(16 * -(xx & 31), 16 * 240);
    }
end

class Scroll with
    event int bases;
do
    var int vel = 0, velprev = 0;
    var u64 base = 0, limit = ( _BASEINIT * 32 ) << 4, baseprev = 0;
    var s16 dragprev = -32768, dragprev1 = -32768;
    par/or do
        every GD_REDRAW do
            velprev = vel;
            baseprev = base;
            dragprev1 = dragprev;
            var int change = _max(1, _abs(vel) >> 5);
            if (vel < 0) then
                vel = vel + change;
            end    
            if (vel > 0) then
                vel = vel - change;
            end
            //vel = (dragprev + 32768) << 4;
            dragprev = -32768;
            base = base + vel;
            base = _max(0, _min(base,limit));
        end
    with
        var int x,y,tag;
        loop do
            (x,y,tag) = await GD_TOUCH;
            await GD_REDRAW;
            if(y > 240 and dragprev1 != -32768) then
                //await GD_REDRAW;
                vel = velprev;
                base = baseprev;
                dragprev = dragprev1;
                vel = (dragprev - x) << 4;
                dragprev = x;
                base = base + vel;
                base = _max(0, _min(base, limit));
            else/if (y>240 and dragprev1 == -32768) then
                dragprev = x;
                base = base + vel;
                base = _max(0, _min(base, limit));
            else/if dragprev1 != -32768 then
                dragprev = -32768;
                base = base + vel;
                base = _max(0, _min(base, limit));
            end
            
        end
    with
        every GD_REDRAW do
            emit this.bases => base >> 4;
        end
    end
end


var Scroll s;
var int prevtag;

par/or do
    par/or do
        every GD_REDRAW do
            prevtag = 0;
        end
    with
        loop do
            var int x,y,tag;
            (x,y,tag) = await GD_TOUCH;
            var int bx = await s.bases;
            if(prevtag != tag and tag >= 128) then
                _level[(bx >> 5) + (tag - 128) / 8]  = _level[(bx >> 5) + (tag - 128) / 8] | ( 1 << (tag & 7) );
            end
            prevtag = tag;
        end
    end
with
    loop do
        var int x = await s.bases;
        _draw(x);
    end
end