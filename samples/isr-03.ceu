/*
 * TIMER-CTC => LED, TIMER => DETACH, BUTTON => RESTART
 * Runs a timer on CTC mode, e.g., every 500ms generates an interrupt.
 * Interrupt generates "emit 500ms" to the application.
 * Also uses PIN02 interrupts from the previous example.
 * Main program blinks LED connected to PIN13 every 500ms.
 * Timer ISR aborts after 5s: ISR in C is also disabled due to finalize.
 * Button click restarts timer ISR.
 * (http://letsmakerobots.com/node/28278)
 */

input int PIN02;

_pinMode(13, _OUTPUT);
_pinMode( 2, _INPUT);

par do
    atomic do
        _TCCR1A = 0;
        _TCCR1B = 0;
        _TCNT1  = 0;
        _OCR1A = 31250;
        _TCCR1B = _TCCR1B | (1 << _WGM12);
        _TCCR1B = _TCCR1B | (1 << _CS12);
    end

    loop do
        watching 5s do
            atomic do
                // enable timer compare interrupt
                _TIMSK1 = _TIMSK1 | (1 << _OCIE1A);
            end
            finalize with
                atomic do
                    // disable timer compare interrupt
                    _TIMSK1 = _TIMSK1 & ~(1 << _OCIE1A);
                end
            end
            async/isr (_TIMER1_COMPA_vect_num, 0) do
                emit 500ms;
            end
        end
        await PIN02;
    end
with
    async/isr (_digitalPinToInterrupt(2),_CHANGE) do
        emit PIN02 => _digitalRead(2);
    end
with
    var int x = 0;
    every 500ms do
        x = not x;
        _digitalWrite(13, x);
    end
end
